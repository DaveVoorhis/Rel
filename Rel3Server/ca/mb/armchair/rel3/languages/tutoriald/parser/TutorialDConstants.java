/* Generated By:JJTree&JavaCC: Do not edit this line. TutorialDConstants.java */
package ca.mb.armchair.rel3.languages.tutoriald.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TutorialDConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int ADD = 9;
  /** RegularExpression Id. */
  int ALL = 10;
  /** RegularExpression Id. */
  int AND = 11;
  /** RegularExpression Id. */
  int ANNOUNCE = 12;
  /** RegularExpression Id. */
  int ARRAY = 13;
  /** RegularExpression Id. */
  int AS = 14;
  /** RegularExpression Id. */
  int ASC = 15;
  /** RegularExpression Id. */
  int AVG = 16;
  /** RegularExpression Id. */
  int AVGD = 17;
  /** RegularExpression Id. */
  int BASE = 18;
  /** RegularExpression Id. */
  int BEGIN = 19;
  /** RegularExpression Id. */
  int BUT = 20;
  /** RegularExpression Id. */
  int BY = 21;
  /** RegularExpression Id. */
  int CALL = 22;
  /** RegularExpression Id. */
  int CASE = 23;
  /** RegularExpression Id. */
  int COMMIT = 24;
  /** RegularExpression Id. */
  int COMPOSE = 25;
  /** RegularExpression Id. */
  int CONSTRAINT = 26;
  /** RegularExpression Id. */
  int COUNT = 27;
  /** RegularExpression Id. */
  int COUNTD = 28;
  /** RegularExpression Id. */
  int DELETE = 29;
  /** RegularExpression Id. */
  int DESC = 30;
  /** RegularExpression Id. */
  int DIVIDEBY = 31;
  /** RegularExpression Id. */
  int DO = 32;
  /** RegularExpression Id. */
  int DROP = 33;
  /** RegularExpression Id. */
  int D_INSERT = 34;
  /** RegularExpression Id. */
  int D_UNION = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int END = 37;
  /** RegularExpression Id. */
  int EOT = 38;
  /** RegularExpression Id. */
  int EXACTLYD = 39;
  /** RegularExpression Id. */
  int EXACTLY = 40;
  /** RegularExpression Id. */
  int EXECUTE = 41;
  /** RegularExpression Id. */
  int EXTEND = 42;
  /** RegularExpression Id. */
  int EXTERNAL = 43;
  /** RegularExpression Id. */
  int FALSE = 44;
  /** RegularExpression Id. */
  int FOREIGN = 45;
  /** RegularExpression Id. */
  int FOR = 46;
  /** RegularExpression Id. */
  int FROM = 47;
  /** RegularExpression Id. */
  int GROUP = 48;
  /** RegularExpression Id. */
  int I_DELETE = 49;
  /** RegularExpression Id. */
  int I_MINUS = 50;
  /** RegularExpression Id. */
  int IF = 51;
  /** RegularExpression Id. */
  int IN = 52;
  /** RegularExpression Id. */
  int INIT = 53;
  /** RegularExpression Id. */
  int INSERT = 54;
  /** RegularExpression Id. */
  int INTERSECT = 55;
  /** RegularExpression Id. */
  int IS = 56;
  /** RegularExpression Id. */
  int JOIN = 57;
  /** RegularExpression Id. */
  int KEY = 58;
  /** RegularExpression Id. */
  int LEAVE = 59;
  /** RegularExpression Id. */
  int LOAD = 60;
  /** RegularExpression Id. */
  int LAMBDA = 61;
  /** RegularExpression Id. */
  int LAMBDAEND = 62;
  /** RegularExpression Id. */
  int MATCHING = 63;
  /** RegularExpression Id. */
  int MAX = 64;
  /** RegularExpression Id. */
  int MIN = 65;
  /** RegularExpression Id. */
  int MINUS = 66;
  /** RegularExpression Id. */
  int NOT = 67;
  /** RegularExpression Id. */
  int OPERATOR = 68;
  /** RegularExpression Id. */
  int ORDER = 69;
  /** RegularExpression Id. */
  int ORDERED = 70;
  /** RegularExpression Id. */
  int ORDINAL = 71;
  /** RegularExpression Id. */
  int OR = 72;
  /** RegularExpression Id. */
  int OUTPUT = 73;
  /** RegularExpression Id. */
  int PER = 74;
  /** RegularExpression Id. */
  int POSSREP = 75;
  /** RegularExpression Id. */
  int PREFIX = 76;
  /** RegularExpression Id. */
  int PRIVATE = 77;
  /** RegularExpression Id. */
  int PUBLIC = 78;
  /** RegularExpression Id. */
  int REAL = 79;
  /** RegularExpression Id. */
  int RELATION = 80;
  /** RegularExpression Id. */
  int RENAME = 81;
  /** RegularExpression Id. */
  int RETURN = 82;
  /** RegularExpression Id. */
  int RETURNS = 83;
  /** RegularExpression Id. */
  int ROLLBACK = 84;
  /** RegularExpression Id. */
  int SAME_HEADING_AS = 85;
  /** RegularExpression Id. */
  int SAME_TYPE_AS = 86;
  /** RegularExpression Id. */
  int SET = 87;
  /** RegularExpression Id. */
  int SEMIJOIN = 88;
  /** RegularExpression Id. */
  int SEMIMINUS = 89;
  /** RegularExpression Id. */
  int SUFFIX = 90;
  /** RegularExpression Id. */
  int SUMD = 91;
  /** RegularExpression Id. */
  int SUMMARIZE = 92;
  /** RegularExpression Id. */
  int SUM = 93;
  /** RegularExpression Id. */
  int SYNONYMS = 94;
  /** RegularExpression Id. */
  int TABLE_DEE = 95;
  /** RegularExpression Id. */
  int TABLE_DUM = 96;
  /** RegularExpression Id. */
  int TCLOSE = 97;
  /** RegularExpression Id. */
  int THEN = 98;
  /** RegularExpression Id. */
  int TIMES = 99;
  /** RegularExpression Id. */
  int TO = 100;
  /** RegularExpression Id. */
  int TRANSACTION = 101;
  /** RegularExpression Id. */
  int TRUE = 102;
  /** RegularExpression Id. */
  int TUPLE = 103;
  /** RegularExpression Id. */
  int TYPE = 104;
  /** RegularExpression Id. */
  int UNGROUP = 105;
  /** RegularExpression Id. */
  int UNION = 106;
  /** RegularExpression Id. */
  int UNWRAP = 107;
  /** RegularExpression Id. */
  int UPDATES = 108;
  /** RegularExpression Id. */
  int UPDATE = 109;
  /** RegularExpression Id. */
  int VAR = 110;
  /** RegularExpression Id. */
  int VERSION = 111;
  /** RegularExpression Id. */
  int VIRTUAL = 112;
  /** RegularExpression Id. */
  int WHEN = 113;
  /** RegularExpression Id. */
  int WHERE = 114;
  /** RegularExpression Id. */
  int WHILE = 115;
  /** RegularExpression Id. */
  int WITH = 116;
  /** RegularExpression Id. */
  int WRAP = 117;
  /** RegularExpression Id. */
  int WRITE = 118;
  /** RegularExpression Id. */
  int WRITELN = 119;
  /** RegularExpression Id. */
  int XOR = 120;
  /** RegularExpression Id. */
  int XUNION = 121;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 122;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 123;
  /** RegularExpression Id. */
  int HEX_LITERAL = 124;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 125;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 126;
  /** RegularExpression Id. */
  int EXPONENT = 127;
  /** RegularExpression Id. */
  int STRING_LITERAL = 128;
  /** RegularExpression Id. */
  int IDENTIFIER = 129;
  /** RegularExpression Id. */
  int LETTER = 130;
  /** RegularExpression Id. */
  int DIGIT = 131;
  /** RegularExpression Id. */
  int LPAREN = 132;
  /** RegularExpression Id. */
  int RPAREN = 133;
  /** RegularExpression Id. */
  int LBRACE = 134;
  /** RegularExpression Id. */
  int RBRACE = 135;
  /** RegularExpression Id. */
  int SEMICOLON = 136;
  /** RegularExpression Id. */
  int COMMA = 137;
  /** RegularExpression Id. */
  int COLON = 138;
  /** RegularExpression Id. */
  int ASSIGN = 139;
  /** RegularExpression Id. */
  int EQ = 140;
  /** RegularExpression Id. */
  int GT = 141;
  /** RegularExpression Id. */
  int LT = 142;
  /** RegularExpression Id. */
  int LTE = 143;
  /** RegularExpression Id. */
  int GTE = 144;
  /** RegularExpression Id. */
  int NEQ = 145;
  /** RegularExpression Id. */
  int PLUS = 146;
  /** RegularExpression Id. */
  int SUBT = 147;
  /** RegularExpression Id. */
  int STAR = 148;
  /** RegularExpression Id. */
  int SLASH = 149;
  /** RegularExpression Id. */
  int ENDFOREIGN = 150;
  /** RegularExpression Id. */
  int TEXT = 151;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int SCRIPT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"ADD\"",
    "\"ALL\"",
    "\"AND\"",
    "\"ANNOUNCE\"",
    "\"ARRAY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"AVG\"",
    "\"AVGD\"",
    "\"BASE\"",
    "\"BEGIN\"",
    "\"BUT\"",
    "\"BY\"",
    "\"CALL\"",
    "\"CASE\"",
    "\"COMMIT\"",
    "\"COMPOSE\"",
    "\"CONSTRAINT\"",
    "\"COUNT\"",
    "\"COUNTD\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DIVIDEBY\"",
    "\"DO\"",
    "\"DROP\"",
    "\"D_INSERT\"",
    "\"D_UNION\"",
    "\"ELSE\"",
    "\"END\"",
    "\"<EOT>\"",
    "\"EXACTLYD\"",
    "\"EXACTLY\"",
    "\"EXECUTE\"",
    "\"EXTEND\"",
    "\"EXTERNAL\"",
    "\"FALSE\"",
    "\"FOREIGN\"",
    "\"FOR\"",
    "\"FROM\"",
    "\"GROUP\"",
    "\"I_DELETE\"",
    "\"I_MINUS\"",
    "\"IF\"",
    "\"IN\"",
    "\"INIT\"",
    "\"INSERT\"",
    "\"INTERSECT\"",
    "\"IS\"",
    "\"JOIN\"",
    "\"KEY\"",
    "\"LEAVE\"",
    "\"LOAD\"",
    "\"~[\"",
    "\"]~\"",
    "\"MATCHING\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"MINUS\"",
    "\"NOT\"",
    "\"OPERATOR\"",
    "\"ORDER\"",
    "\"ORDERED\"",
    "\"ORDINAL\"",
    "\"OR\"",
    "\"OUTPUT\"",
    "\"PER\"",
    "\"POSSREP\"",
    "\"PREFIX\"",
    "\"PRIVATE\"",
    "\"PUBLIC\"",
    "\"REAL\"",
    "<RELATION>",
    "\"RENAME\"",
    "\"RETURN\"",
    "\"RETURNS\"",
    "\"ROLLBACK\"",
    "\"SAME_HEADING_AS\"",
    "\"SAME_TYPE_AS\"",
    "\"SET\"",
    "\"SEMIJOIN\"",
    "\"SEMIMINUS\"",
    "\"SUFFIX\"",
    "\"SUMD\"",
    "\"SUMMARIZE\"",
    "\"SUM\"",
    "\"SYNONYMS\"",
    "<TABLE_DEE>",
    "<TABLE_DUM>",
    "\"TCLOSE\"",
    "\"THEN\"",
    "\"TIMES\"",
    "\"TO\"",
    "\"TRANSACTION\"",
    "\"TRUE\"",
    "<TUPLE>",
    "\"TYPE\"",
    "\"UNGROUP\"",
    "\"UNION\"",
    "\"UNWRAP\"",
    "\"UPDATES\"",
    "\"UPDATE\"",
    "\"VAR\"",
    "\"VERSION\"",
    "<VIRTUAL>",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"WHILE\"",
    "\"WITH\"",
    "\"WRAP\"",
    "\"WRITE\"",
    "\"WRITELN\"",
    "\"XOR\"",
    "\"XUNION\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\":=\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"\\nEND\"",
    "<TEXT>",
    "\"[\"",
    "\"]\"",
    "\"||\"",
  };

}
