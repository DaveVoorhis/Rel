/* Generated By:JJTree&JavaCC: Do not edit this line. TutorialD.java */
package ca.mb.armchair.rel3.languages.tutoriald.parser;
public class TutorialD/*@bgen(jjtree)*/implements TutorialDTreeConstants, TutorialDConstants {/*@bgen(jjtree)*/
  protected JJTTutorialDState jjtree = new JJTTutorialDState();void jjtreeOpenNodeScope( Node node )
  {
    ((ca.mb.armchair.rel3.languages.tutoriald.BaseASTNode)node).first_token = getToken(1);
  }

  void jjtreeCloseNodeScope( Node node )
  {
    ((ca.mb.armchair.rel3.languages.tutoriald.BaseASTNode)node).last_token = getToken(0);
  }

  final public ASTEvaluate evaluate() throws ParseException {
 /*@bgen(jjtree) Evaluate */
  ASTEvaluate jjtn000 = new ASTEvaluate(JJTEVALUATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
        compound_statement_body();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOT:
        jj_consume_token(EOT);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                           jjtreeCloseNodeScope(jjtn000);
                                                                          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTCode code() throws ParseException {
 /*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      statement();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANNOUNCE:
        case BEGIN:
        case CALL:
        case CASE:
        case COMMIT:
        case CONSTRAINT:
        case DELETE:
        case DO:
        case DROP:
        case D_INSERT:
        case EXECUTE:
        case FOR:
        case I_DELETE:
        case IF:
        case INSERT:
        case LEAVE:
        case LOAD:
        case OPERATOR:
        case OUTPUT:
        case RETURN:
        case ROLLBACK:
        case SET:
        case TYPE:
        case UPDATE:
        case VAR:
        case WHILE:
        case WRITE:
        case WRITELN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        statement();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOT:
        jj_consume_token(EOT);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                         jjtreeCloseNodeScope(jjtn000);
                                                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTStatement statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      statement_body();
      jj_consume_token(SEMICOLON);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                              {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void op_before_returns() throws ParseException {
    jj_consume_token(OPERATOR);
    identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      type_ref();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        identifier();
        type_ref();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void op_after_returns() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNONYMS:
    case UPDATES:
    case VERSION:
    case SEMICOLON:
      op_updates();
      op_synonym();
      op_version();
      jj_consume_token(SEMICOLON);
      op_body();
      jj_consume_token(END);
      jj_consume_token(OPERATOR);
      break;
    case IDENTIFIER:
      identifier();
      jj_consume_token(FOREIGN);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(TEXT);
      }
      jj_consume_token(ENDFOREIGN);
      jj_consume_token(OPERATOR);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ASTGetOperatorReturnType getoperatorreturntype() throws ParseException {
 /*@bgen(jjtree) #GetOperatorReturnType( 3) */
  ASTGetOperatorReturnType jjtn000 = new ASTGetOperatorReturnType(JJTGETOPERATORRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      op_before_returns();
      op_returns();
      op_after_returns();
                                                              jjtree.closeNodeScope(jjtn000,  3);
                                                              jjtc000 = false;
                                                              jjtreeCloseNodeScope(jjtn000);
                                                             {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTGetHeading getheading() throws ParseException {
 /*@bgen(jjtree) GetHeading */
  ASTGetHeading jjtn000 = new ASTGetHeading(JJTGETHEADING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      heading();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtreeCloseNodeScope(jjtn000);
                   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTGetSignature getsignature() throws ParseException {
 /*@bgen(jjtree) GetSignature */
  ASTGetSignature jjtn000 = new ASTGetSignature(JJTGETSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      op_signature();
      op_returns();
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      jjtreeCloseNodeScope(jjtn000);
                                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void statement_body() throws ParseException {
    if (jj_2_1(2)) {
      assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
      case FOR:
      case WHILE:
      case IDENTIFIER:
        loop();
        break;
      case OPERATOR:
        op_def();
        break;
      case TYPE:
        type_def();
        break;
      case DROP:
        drop();
        break;
      case VAR:
        var_def();
        break;
      case CONSTRAINT:
        db_constraint_def();
        break;
      case LOAD:
        relation_array_load();
        break;
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_2(2)) {
          begin_transaction();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BEGIN:
            compound_statement_body();
            break;
          case COMMIT:
            commit();
            break;
          case ROLLBACK:
            rollback();
            break;
          case CALL:
            call();
            break;
          case RETURN:
            return_statement();
            break;
          case CASE:
            case_statement();
            break;
          case IF:
            if_statement();
            break;
          case LEAVE:
            leave();
            break;
          case WRITE:
            write();
            break;
          case WRITELN:
            writeln();
            break;
          case OUTPUT:
            output();
            break;
          case ANNOUNCE:
            announce();
            break;
          case EXECUTE:
            execute();
            break;
          case SET:
            set();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

/* Rel extension - non-TTM */
  final public void write() throws ParseException {
 /*@bgen(jjtree) Write */
  ASTWrite jjtn000 = new ASTWrite(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Rel extension - non-TTM */
  final public void writeln() throws ParseException {
 /*@bgen(jjtree) Writeln */
  ASTWriteln jjtn000 = new ASTWriteln(JJTWRITELN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WRITELN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Rel extension - non-TTM */
  final public void output() throws ParseException {
 /*@bgen(jjtree) Output */
  ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(OUTPUT);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Rel extension - non-TTM */
  final public void announce() throws ParseException {
 /*@bgen(jjtree) Announce */
  ASTAnnounce jjtn000 = new ASTAnnounce(JJTANNOUNCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ANNOUNCE);
      string_literal();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Rel extension - non-TTM */
  final public void execute() throws ParseException {
 /*@bgen(jjtree) Execute */
  ASTExecute jjtn000 = new ASTExecute(JJTEXECUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(EXECUTE);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Rel extension - non-TTM */
  final public void set() throws ParseException {
 /*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SET);
      identifier();
      identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void compound_statement_body() throws ParseException {
    jj_consume_token(BEGIN);
    jj_consume_token(SEMICOLON);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOUNCE:
      case BEGIN:
      case CALL:
      case CASE:
      case COMMIT:
      case CONSTRAINT:
      case DELETE:
      case DO:
      case DROP:
      case D_INSERT:
      case EXECUTE:
      case FOR:
      case I_DELETE:
      case IF:
      case INSERT:
      case LEAVE:
      case LOAD:
      case OPERATOR:
      case OUTPUT:
      case RETURN:
      case ROLLBACK:
      case SET:
      case TYPE:
      case UPDATE:
      case VAR:
      case WHILE:
      case WRITE:
      case WRITELN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      statement();
    }
    jj_consume_token(END);
  }

  final public void op_def() throws ParseException {
    jj_consume_token(OPERATOR);
    identifier();
    jj_consume_token(LPAREN);
    parameter_def_commalist();
    jj_consume_token(RPAREN);
    op_returns();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNONYMS:
    case UPDATES:
    case VERSION:
    case SEMICOLON:
      rel_op_def();
      break;
    case IDENTIFIER:
      external_op_def();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void lambda() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
      jj_consume_token(OPERATOR);
      lambda_definition();
      jj_consume_token(END);
      jj_consume_token(OPERATOR);
      break;
    case LAMBDA:
      jj_consume_token(LAMBDA);
      lambda_definition();
      jj_consume_token(LAMBDAEND);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void lambda_definition() throws ParseException {
 /*@bgen(jjtree) Lambda */
  ASTLambda jjtn000 = new ASTLambda(JJTLAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      parameter_def_commalist();
      jj_consume_token(RPAREN);
      jj_consume_token(RETURNS);
      type_ref();
      jj_consume_token(SEMICOLON);
      op_body();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void external_op_def() throws ParseException {
 /*@bgen(jjtree) #ExternalOpDef( 4) */
 ASTExternalOpDef jjtn000 = new ASTExternalOpDef(JJTEXTERNALOPDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t; StringBuffer s = new StringBuffer();
    try {
      identifier();
      jj_consume_token(FOREIGN);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(TEXT);
                                             s.append(t.toString());
      }
                                                                          jjtn000.tokenValue = s.toString();
      jj_consume_token(ENDFOREIGN);
      jj_consume_token(OPERATOR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  4);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void rel_op_def() throws ParseException {
 /*@bgen(jjtree) #UserOpDef( 7) */
  ASTUserOpDef jjtn000 = new ASTUserOpDef(JJTUSEROPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      op_updates();
      op_synonym();
      op_version();
      jj_consume_token(SEMICOLON);
      op_body();
      jj_consume_token(END);
      jj_consume_token(OPERATOR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  7);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Note: op_returns() and op_updates()
should be mutually exclusive. */
  final public void op_returns() throws ParseException {
 /*@bgen(jjtree) UserOpReturns */
  ASTUserOpReturns jjtn000 = new ASTUserOpReturns(JJTUSEROPRETURNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURNS:
        jj_consume_token(RETURNS);
        type_ref();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void op_updates() throws ParseException {
 /*@bgen(jjtree) UserOpUpdates */
  ASTUserOpUpdates jjtn000 = new ASTUserOpUpdates(JJTUSEROPUPDATES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATES:
        jj_consume_token(UPDATES);
        jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          jj_consume_token(BUT);
          parameter_name_commalist();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void op_synonym() throws ParseException {
 /*@bgen(jjtree) UserOpSynonym */
  ASTUserOpSynonym jjtn000 = new ASTUserOpSynonym(JJTUSEROPSYNONYM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYNONYMS:
        synonym_def();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void op_version() throws ParseException {
 /*@bgen(jjtree) UserOpVersion */
  ASTUserOpVersion jjtn000 = new ASTUserOpVersion(JJTUSEROPVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
        jj_consume_token(VERSION);
        identifier();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void op_body() throws ParseException {
 /*@bgen(jjtree) UserOpBody */
  ASTUserOpBody jjtn000 = new ASTUserOpBody(JJTUSEROPBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOUNCE:
      case BEGIN:
      case CALL:
      case CASE:
      case COMMIT:
      case CONSTRAINT:
      case DELETE:
      case DO:
      case DROP:
      case D_INSERT:
      case EXECUTE:
      case FOR:
      case I_DELETE:
      case IF:
      case INSERT:
      case LEAVE:
      case LOAD:
      case OPERATOR:
      case OUTPUT:
      case RETURN:
      case ROLLBACK:
      case SET:
      case TYPE:
      case UPDATE:
      case VAR:
      case WHILE:
      case WRITE:
      case WRITELN:
      case IDENTIFIER:
        statement();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void return_statement() throws ParseException {
 /*@bgen(jjtree) ReturnExpression */
  ASTReturnExpression jjtn000 = new ASTReturnExpression(JJTRETURNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void parameter_def_commalist() throws ParseException {
 /*@bgen(jjtree) UserOpParameters */
  ASTUserOpParameters jjtn000 = new ASTUserOpParameters(JJTUSEROPPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        parameter_def();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          parameter_def();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void parameter_def() throws ParseException {
 /*@bgen(jjtree) ParmDef */
  ASTParmDef jjtn000 = new ASTParmDef(JJTPARMDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      type_ref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void parameter_name_commalist() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        identifier();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void synonym_def() throws ParseException {
    jj_consume_token(SYNONYMS);
    jj_consume_token(LBRACE);
    user_op_name_commalist();
    jj_consume_token(RBRACE);
  }

/* Not explicitly defined in TTM3 */
  final public void user_op_name_commalist() throws ParseException {
    identifier();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      identifier();
    }
  }

/* Inclusion of type_ref_commalist() in
OPERATOR DROP is not per TTM3,
but necessary to 
disambiguate operators. */
  final public void drop() throws ParseException {
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
      jj_consume_token(OPERATOR);
                                     ASTDropOperator jjtn001 = new ASTDropOperator(JJTDROPOPERATOR);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtreeOpenNodeScope(jjtn001);
      try {
        op_signature();
      } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte001;}
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte001;}
                                     }
                                     {if (true) throw (Error)jjte001;}
      } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtreeCloseNodeScope(jjtn001);
                                     }
      }
      break;
    case VAR:
      jj_consume_token(VAR);
                                ASTDropRelvar jjtn002 = new ASTDropRelvar(JJTDROPRELVAR);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                                jjtreeOpenNodeScope(jjtn002);
      try {
        identifier();
      } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte002;}
                                }
                                if (jjte002 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte002;}
                                }
                                {if (true) throw (Error)jjte002;}
      } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  1);
                                  jjtreeCloseNodeScope(jjtn002);
                                }
      }
      break;
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
                                       ASTDropConstraint jjtn003 = new ASTDropConstraint(JJTDROPCONSTRAINT);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                       jjtreeOpenNodeScope(jjtn003);
      try {
        identifier();
      } catch (Throwable jjte003) {
                                       if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte003;}
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte003;}
                                       }
                                       {if (true) throw (Error)jjte003;}
      } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  1);
                                         jjtreeCloseNodeScope(jjtn003);
                                       }
      }
      break;
    case TYPE:
      jj_consume_token(TYPE);
                                 ASTDropType jjtn004 = new ASTDropType(JJTDROPTYPE);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                                 jjtreeOpenNodeScope(jjtn004);
      try {
        identifier();
      } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte004;}
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte004;}
                                 }
                                 {if (true) throw (Error)jjte004;}
      } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  1);
                                   jjtreeCloseNodeScope(jjtn004);
                                 }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void op_signature() throws ParseException {
 /*@bgen(jjtree) OpSignature */
  ASTOpSignature jjtn000 = new ASTOpSignature(JJTOPSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LPAREN);
      type_ref_commalist();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void op_type() throws ParseException {
 /*@bgen(jjtree) OpType */
  ASTOpType jjtn000 = new ASTOpType(JJTOPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(OPERATOR);
      jj_consume_token(LPAREN);
      type_ref_commalist();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURNS:
        jj_consume_token(RETURNS);
        type_ref();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void type_ref_commalist() throws ParseException {
 /*@bgen(jjtree) TypeRefCommalist */
  ASTTypeRefCommalist jjtn000 = new ASTTypeRefCommalist(JJTTYPEREFCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
      case RELATION:
      case SAME_TYPE_AS:
      case TUPLE:
      case IDENTIFIER:
        type_ref();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
          type_ref();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Was user_scalar_type_def */
  final public void type_def() throws ParseException {
 /*@bgen(jjtree) TypeDef */
  ASTTypeDef jjtn000 = new ASTTypeDef(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TYPE);
      identifier();
      type_def_kind();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void type_def_kind() throws ParseException {
    if (jj_2_3(2147483647)) {
      type_def_external();
    } else {
      type_def_internal();
    }
  }

  final public void type_def_external() throws ParseException {
 /*@bgen(jjtree) TypeDefExternal */
 ASTTypeDefExternal jjtn000 = new ASTTypeDefExternal(JJTTYPEDEFEXTERNAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t; StringBuffer s = new StringBuffer();
    try {
      identifier();
      jj_consume_token(FOREIGN);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_10;
        }
        t = jj_consume_token(TEXT);
                                             s.append(t.toString());
      }
                                                                          jjtn000.tokenValue = s.toString();
      jj_consume_token(ENDFOREIGN);
      jj_consume_token(TYPE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* User-defined (internal) types start here */
  final public void type_def_internal() throws ParseException {
 /*@bgen(jjtree) TypeDefInternal */
  ASTTypeDefInternal jjtn000 = new ASTTypeDefInternal(JJTTYPEDEFINTERNAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      type_def_internal_ordinal();
      type_def_internal_union();
      type_def_internal_is_or_possrep();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void type_def_internal_is_or_possrep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      is_def();
      break;
    default:
      jj_la1[32] = jj_gen;
      possrep_def_list();
    }
  }

  final public void type_def_internal_ordinal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERED:
    case ORDINAL:
      type_def_internal_opt_ordinal();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void type_def_internal_opt_ordinal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDINAL:
            ASTTypeDefInternalOptOrdinal jjtn001 = new ASTTypeDefInternalOptOrdinal(JJTTYPEDEFINTERNALOPTORDINAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(ORDINAL);
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
      }
      break;
    case ORDERED:
            ASTTypeDefInternalOptOrdered jjtn002 = new ASTTypeDefInternalOptOrdered(JJTTYPEDEFINTERNALOPTORDERED);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(ORDERED);
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type_def_internal_union() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNION:
      type_def_internal_opt_union();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  final public void type_def_internal_opt_union() throws ParseException {
 /*@bgen(jjtree) TypeDefInternalOptUnion */
  ASTTypeDefInternalOptUnion jjtn000 = new ASTTypeDefInternalOptUnion(JJTTYPEDEFINTERNALOPTUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(UNION);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void is_def() throws ParseException {
    jj_consume_token(IS);
    jj_consume_token(LBRACE);
    if (jj_2_4(2)) {
      single_inheritance_is_def();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        multiple_inheritance_is_def();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void single_inheritance_is_def() throws ParseException {
 /*@bgen(jjtree) SingleInheritanceIsDef */
  ASTSingleInheritanceIsDef jjtn000 = new ASTSingleInheritanceIsDef(JJTSINGLEINHERITANCEISDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      possrep_or_specialization_details();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void possrep_or_specialization_details() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      specialisation_constraint_def();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSREP:
        derived_possrep_def_list();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      possrep_def_list();
    }
  }

  final public void multiple_inheritance_is_def() throws ParseException {
 /*@bgen(jjtree) MultipleInheritanceIsDef */
  ASTMultipleInheritanceIsDef jjtn000 = new ASTMultipleInheritanceIsDef(JJTMULTIPLEINHERITANCEISDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      scalar_type_name_commalist();
      derived_possrep_def_list();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void scalar_type_name_commalist() throws ParseException {
    scalar_type_name();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      scalar_type_name();
    }
  }

  final public void scalar_type_name() throws ParseException {
 /*@bgen(jjtree) ScalarTypeName */
  ASTScalarTypeName jjtn000 = new ASTScalarTypeName(JJTSCALARTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void possrep_def_list() throws ParseException {
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSREP:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_12;
      }
      possrep_def();
    }
    possrep_opt_initialiser();
  }

/* Not defined in TTM3.  For explicitly setting
values of components not in the current possrep.  
Only required by types with multiple possreps.
Takes the place of "highly protected
operators not part of D". (pg 382, etc.) */
  final public void possrep_opt_initialiser() throws ParseException {
 /*@bgen(jjtree) PossrepInitialiser */
  ASTPossrepInitialiser jjtn000 = new ASTPossrepInitialiser(JJTPOSSREPINITIALISER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
        jj_consume_token(INIT);
        possrep_initialiser_assignments();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_13;
          }
          possrep_initialiser_assignments();
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not defined in TTM3, as per above.
Identifier should be existing POSSREP name. */
  final public void possrep_initialiser_assignments() throws ParseException {
 /*@bgen(jjtree) PossrepInitialiserAssignments */
  ASTPossrepInitialiserAssignments jjtn000 = new ASTPossrepInitialiserAssignments(JJTPOSSREPINITIALISERASSIGNMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LPAREN);
      assignment();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void possrep_def() throws ParseException {
 /*@bgen(jjtree) PossrepDef */
  ASTPossrepDef jjtn000 = new ASTPossrepDef(JJTPOSSREPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(POSSREP);
      possrep_def_identifier();
      jj_consume_token(LBRACE);
      possrep_component_def_commalist();
      possrep_opt_constraint_def();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void possrep_def_identifier() throws ParseException {
 /*@bgen(jjtree) PossrepDefIdentifier */
  ASTPossrepDefIdentifier jjtn000 = new ASTPossrepDefIdentifier(JJTPOSSREPDEFIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void possrep_opt_constraint_def() throws ParseException {
 /*@bgen(jjtree) PossrepDefConstraintDef */
  ASTPossrepDefConstraintDef jjtn000 = new ASTPossrepDefConstraintDef(JJTPOSSREPDEFCONSTRAINTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRAINT:
        constraint_def();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void possrep_component_def_commalist() throws ParseException {
 /*@bgen(jjtree) PossrepDefComponentCommalist */
  ASTPossrepDefComponentCommalist jjtn000 = new ASTPossrepDefComponentCommalist(JJTPOSSREPDEFCOMPONENTCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        possrep_component_def();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          possrep_component_def();
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void possrep_component_def() throws ParseException {
 /*@bgen(jjtree) PossrepDefComponent */
  ASTPossrepDefComponent jjtn000 = new ASTPossrepDefComponent(JJTPOSSREPDEFCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      type_ref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Expression must be boolean */
  final public void constraint_def() throws ParseException {
 /*@bgen(jjtree) PossrepConstraintDef */
  ASTPossrepConstraintDef jjtn000 = new ASTPossrepConstraintDef(JJTPOSSREPCONSTRAINTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTRAINT);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Expression must be boolean */
  final public void specialisation_constraint_def() throws ParseException {
 /*@bgen(jjtree) SpecialisationConstraintDef */
  ASTSpecialisationConstraintDef jjtn000 = new ASTSpecialisationConstraintDef(JJTSPECIALISATIONCONSTRAINTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTRAINT);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void derived_possrep_def_list() throws ParseException {
    derived_possrep_def();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSREP:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_15;
      }
      derived_possrep_def();
    }
  }

  final public void derived_possrep_def() throws ParseException {
 /*@bgen(jjtree) DerivedPossrepDef */
  ASTDerivedPossrepDef jjtn000 = new ASTDerivedPossrepDef(JJTDERIVEDPOSSREPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(POSSREP);
      derived_possrep_def_opt_identifier();
      jj_consume_token(LBRACE);
      derived_possrep_component_def_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void derived_possrep_def_opt_identifier() throws ParseException {
 /*@bgen(jjtree) DerivedPossrepDefOptIdentifier */
  ASTDerivedPossrepDefOptIdentifier jjtn000 = new ASTDerivedPossrepDefOptIdentifier(JJTDERIVEDPOSSREPDEFOPTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Not explicitly defined in TTM3 */
  final public void derived_possrep_component_def_commalist() throws ParseException {
    derived_possrep_component_def();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      derived_possrep_component_def();
    }
  }

  final public void derived_possrep_component_def() throws ParseException {
 /*@bgen(jjtree) DerivedPossrepComponentDef */
  ASTDerivedPossrepComponentDef jjtn000 = new ASTDerivedPossrepComponentDef(JJTDERIVEDPOSSREPCOMPONENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(EQ);
      identifier();
      jj_consume_token(LPAREN);
      identifier();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* End user-defined types (internal) */

/* Includes scalar_var_def,
relation_var_def,
array_var_def and
tuple_var_def */
  final public void var_def() throws ParseException {
 /*@bgen(jjtree) VarDef */
  ASTVarDef jjtn000 = new ASTVarDef(JJTVARDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
      case OPERATOR:
      case RELATION:
      case SAME_TYPE_AS:
      case TUPLE:
      case IDENTIFIER:
        var_scalar_or_tuple();
        break;
      case ARRAY:
        var_array();
        break;
      case BASE:
      case EXTERNAL:
      case PRIVATE:
      case PUBLIC:
      case REAL:
      case VIRTUAL:
        var_relvar();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_relvar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
    case REAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
        jj_consume_token(REAL);
        break;
      case BASE:
        jj_consume_token(BASE);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      var_type_or_init_value();
                                                               ASTVarRelvarReal jjtn001 = new ASTVarRelvarReal(JJTVARRELVARREAL);
                                                               boolean jjtc001 = true;
                                                               jjtree.openNodeScope(jjtn001);
                                                               jjtreeOpenNodeScope(jjtn001);
      try {
        var_keydeflist();
      } catch (Throwable jjte001) {
                                                               if (jjtc001) {
                                                                 jjtree.clearNodeScope(jjtn001);
                                                                 jjtc001 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte001 instanceof RuntimeException) {
                                                                 {if (true) throw (RuntimeException)jjte001;}
                                                               }
                                                               if (jjte001 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte001;}
                                                               }
                                                               {if (true) throw (Error)jjte001;}
      } finally {
                                                               if (jjtc001) {
                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                 jjtreeCloseNodeScope(jjtn001);
                                                               }
      }
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      var_type_or_init_value();
                                                                           ASTVarRelvarPrivate jjtn002 = new ASTVarRelvarPrivate(JJTVARRELVARPRIVATE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
                                                                           jjtreeOpenNodeScope(jjtn002);
      try {
        var_keydeflist();
      } catch (Throwable jjte002) {
                                                                           if (jjtc002) {
                                                                             jjtree.clearNodeScope(jjtn002);
                                                                             jjtc002 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte002 instanceof RuntimeException) {
                                                                             {if (true) throw (RuntimeException)jjte002;}
                                                                           }
                                                                           if (jjte002 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte002;}
                                                                           }
                                                                           {if (true) throw (Error)jjte002;}
      } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                             jjtreeCloseNodeScope(jjtn002);
                                                                           }
      }
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      type_ref();
                                                             ASTVarRelvarPublic jjtn003 = new ASTVarRelvarPublic(JJTVARRELVARPUBLIC);
                                                             boolean jjtc003 = true;
                                                             jjtree.openNodeScope(jjtn003);
                                                             jjtreeOpenNodeScope(jjtn003);
      try {
        var_keydeflist();
      } catch (Throwable jjte003) {
                                                             if (jjtc003) {
                                                               jjtree.clearNodeScope(jjtn003);
                                                               jjtc003 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte003 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte003;}
                                                             }
                                                             if (jjte003 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte003;}
                                                             }
                                                             {if (true) throw (Error)jjte003;}
      } finally {
                                                             if (jjtc003) {
                                                               jjtree.closeNodeScope(jjtn003,  2);
                                                               jjtreeCloseNodeScope(jjtn003);
                                                             }
      }
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
      expression();
                                                               ASTVarRelvarVirtual jjtn004 = new ASTVarRelvarVirtual(JJTVARRELVARVIRTUAL);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                               jjtreeOpenNodeScope(jjtn004);
      try {
        var_keydeflistoptional();
      } catch (Throwable jjte004) {
                                                               if (jjtc004) {
                                                                 jjtree.clearNodeScope(jjtn004);
                                                                 jjtc004 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte004 instanceof RuntimeException) {
                                                                 {if (true) throw (RuntimeException)jjte004;}
                                                               }
                                                               if (jjte004 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte004;}
                                                               }
                                                               {if (true) throw (Error)jjte004;}
      } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                 jjtreeCloseNodeScope(jjtn004);
                                                               }
      }
      break;
    case EXTERNAL:
      var_relvar_external();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void var_relvar_external() throws ParseException {
 /*@bgen(jjtree) VarRelvarExternal */
  ASTVarRelvarExternal jjtn000 = new ASTVarRelvarExternal(JJTVARRELVAREXTERNAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(EXTERNAL);
      identifier();
      string_literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
    }
  }

  final public void var_keydeflist() throws ParseException {
 /*@bgen(jjtree) KeyDefList */
  ASTKeyDefList jjtn000 = new ASTKeyDefList(JJTKEYDEFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      var_keydef();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KEY:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_17;
        }
        var_keydef();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_keydeflistoptional() throws ParseException {
 /*@bgen(jjtree) KeyDefList */
  ASTKeyDefList jjtn000 = new ASTKeyDefList(JJTKEYDEFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KEY:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_18;
        }
        var_keydef();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_keydef() throws ParseException {
 /*@bgen(jjtree) KeyDef */
  ASTKeyDef jjtn000 = new ASTKeyDef(JJTKEYDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(KEY);
      jj_consume_token(LBRACE);
      attribute_name_list();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_scalar_or_tuple() throws ParseException {
 /*@bgen(jjtree) VarScalarOrTuple */
  ASTVarScalarOrTuple jjtn000 = new ASTVarScalarOrTuple(JJTVARSCALARORTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      var_type_or_init_value();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_type_or_init_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
    case RELATION:
    case SAME_TYPE_AS:
    case TUPLE:
    case IDENTIFIER:
      var_type_and_optional_init();
      break;
    case INIT:
      var_init();
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void var_type_and_optional_init() throws ParseException {
 /*@bgen(jjtree) VarTypeAndOptionalInit */
  ASTVarTypeAndOptionalInit jjtn000 = new ASTVarTypeAndOptionalInit(JJTVARTYPEANDOPTIONALINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      type_ref();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
        jj_consume_token(INIT);
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_init() throws ParseException {
 /*@bgen(jjtree) VarInit */
  ASTVarInit jjtn000 = new ASTVarInit(JJTVARINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(INIT);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void var_array() throws ParseException {
 /*@bgen(jjtree) VarArray */
  ASTVarArray jjtn000 = new ASTVarArray(JJTVARARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ARRAY);
      type_ref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void db_constraint_def() throws ParseException {
 /*@bgen(jjtree) DatabaseConstraint */
  ASTDatabaseConstraint jjtn000 = new ASTDatabaseConstraint(JJTDATABASECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTRAINT);
      identifier();
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* type -- scalar_type, tuple_type, relation_type */
  final public void type_ref() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
                  ASTType jjtn001 = new ASTType(JJTTYPE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        identifier();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
      break;
    case SAME_TYPE_AS:
      type_same_type_as();
      break;
    case TUPLE:
      tuple_type();
      break;
    case RELATION:
      relation_type();
      break;
    case OPERATOR:
      op_type();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type_same_type_as() throws ParseException {
 /*@bgen(jjtree) TypeSameTypeAs */
  ASTTypeSameTypeAs jjtn000 = new ASTTypeSameTypeAs(JJTTYPESAMETYPEAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SAME_TYPE_AS);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void tuple_type() throws ParseException {
 /*@bgen(jjtree) TypeTuple */
  ASTTypeTuple jjtn000 = new ASTTypeTuple(JJTTYPETUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TUPLE);
      heading_type();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void relation_type() throws ParseException {
 /*@bgen(jjtree) TypeRelation */
  ASTTypeRelation jjtn000 = new ASTTypeRelation(JJTTYPERELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RELATION);
      heading_type();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void heading_type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      heading();
      break;
    case SAME_HEADING_AS:
      same_heading_as();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void same_heading_as() throws ParseException {
 /*@bgen(jjtree) SameHeadingAs */
  ASTSameHeadingAs jjtn000 = new ASTSameHeadingAs(JJTSAMEHEADINGAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SAME_HEADING_AS);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void relation_array_load() throws ParseException {
 /*@bgen(jjtree) RelationArrayLoad */
  ASTRelationArrayLoad jjtn000 = new ASTRelationArrayLoad(JJTRELATIONARRAYLOAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LOAD);
      identifier();
      jj_consume_token(FROM);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void begin_transaction() throws ParseException {
 /*@bgen(jjtree) TransactionBegin */
  ASTTransactionBegin jjtn000 = new ASTTransactionBegin(JJTTRANSACTIONBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BEGIN);
      jj_consume_token(TRANSACTION);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void commit() throws ParseException {
 /*@bgen(jjtree) TransactionCommit */
  ASTTransactionCommit jjtn000 = new ASTTransactionCommit(JJTTRANSACTIONCOMMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(COMMIT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void rollback() throws ParseException {
 /*@bgen(jjtree) TransactionRollback */
  ASTTransactionRollback jjtn000 = new ASTTransactionRollback(JJTTRANSACTIONROLLBACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ROLLBACK);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void case_statement() throws ParseException {
 /*@bgen(jjtree) CaseStatement */
  ASTCaseStatement jjtn000 = new ASTCaseStatement(JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CASE);
      jj_consume_token(SEMICOLON);
      when_def_list();
      case_else();
      jj_consume_token(END);
      jj_consume_token(CASE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void when_def_list() throws ParseException {
 /*@bgen(jjtree) CaseWhenList */
  ASTCaseWhenList jjtn000 = new ASTCaseWhenList(JJTCASEWHENLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      when_def();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHEN:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_19;
        }
        when_def();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void when_def() throws ParseException {
 /*@bgen(jjtree) CaseWhen */
  ASTCaseWhen jjtn000 = new ASTCaseWhen(JJTCASEWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHEN);
      expression();
      jj_consume_token(THEN);
      statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void case_else() throws ParseException {
 /*@bgen(jjtree) CaseElse */
  ASTCaseElse jjtn000 = new ASTCaseElse(JJTCASEELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        statement();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Note that THEN and ELSE are not
followed by semicolons, but maybe should be? */
  final public void if_statement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      expression();
      jj_consume_token(THEN);
      statement();
      if_statement_else();
      jj_consume_token(END);
      jj_consume_token(IF);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void if_statement_else() throws ParseException {
 /*@bgen(jjtree) ElseStatement */
  ASTElseStatement jjtn000 = new ASTElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        statement();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      do_statement();
      break;
    case WHILE:
      while_statement();
      break;
    case FOR:
      for_statement();
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void do_statement() throws ParseException {
 /*@bgen(jjtree) DoLoop */
  ASTDoLoop jjtn000 = new ASTDoLoop(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      identifier();
      jj_consume_token(ASSIGN);
      expression();
      jj_consume_token(TO);
      expression();
      jj_consume_token(SEMICOLON);
      statement();
      jj_consume_token(END);
      jj_consume_token(DO);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void while_statement() throws ParseException {
 /*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      expression();
      jj_consume_token(SEMICOLON);
      statement();
      jj_consume_token(END);
      jj_consume_token(WHILE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void for_statement() throws ParseException {
 /*@bgen(jjtree) ForLoop */
  ASTForLoop jjtn000 = new ASTForLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      expression();
      jj_consume_token(SEMICOLON);
      statement();
      jj_consume_token(END);
      jj_consume_token(FOR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void leave() throws ParseException {
    jj_consume_token(LEAVE);
    identifier();
  }

  final public void call() throws ParseException {
 /*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CALL);
      identifier();
      jj_consume_token(LPAREN);
      arglist();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void assignment() throws ParseException {
 /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      assign();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        assign();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void assign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      jj_consume_token(ASSIGN);
                                    ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
      try {
        expression();
      } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
      } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
      }
      break;
    case INSERT:
      jj_consume_token(INSERT);
      identifier();
                                        ASTInsert jjtn002 = new ASTInsert(JJTINSERT);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                        jjtreeOpenNodeScope(jjtn002);
      try {
        expression();
      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
      }
      break;
    case D_INSERT:
      jj_consume_token(D_INSERT);
      identifier();
                                          ASTDInsert jjtn003 = new ASTDInsert(JJTDINSERT);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                          jjtreeOpenNodeScope(jjtn003);
      try {
        expression();
      } catch (Throwable jjte003) {
                                          if (jjtc003) {
                                            jjtree.clearNodeScope(jjtn003);
                                            jjtc003 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte003 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte003;}
                                          }
                                          if (jjte003 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte003;}
                                          }
                                          {if (true) throw (Error)jjte003;}
      } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  2);
                                            jjtreeCloseNodeScope(jjtn003);
                                          }
      }
      break;
    case DELETE:
      jj_consume_token(DELETE);
      identifier();
                                        ASTDelete jjtn004 = new ASTDelete(JJTDELETE);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
                                        jjtreeOpenNodeScope(jjtn004);
      try {
        delete_parameter();
      } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte004;}
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte004;}
                                        }
                                        {if (true) throw (Error)jjte004;}
      } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                          jjtreeCloseNodeScope(jjtn004);
                                        }
      }
      break;
    case I_DELETE:
      jj_consume_token(I_DELETE);
      identifier();
                                          ASTIDelete jjtn005 = new ASTIDelete(JJTIDELETE);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
                                          jjtreeOpenNodeScope(jjtn005);
      try {
        expression();
      } catch (Throwable jjte005) {
                                          if (jjtc005) {
                                            jjtree.clearNodeScope(jjtn005);
                                            jjtc005 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte005 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte005;}
                                          }
                                          if (jjte005 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte005;}
                                          }
                                          {if (true) throw (Error)jjte005;}
      } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  2);
                                            jjtreeCloseNodeScope(jjtn005);
                                          }
      }
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      identifier();
      update_where();
      jj_consume_token(COLON);
                                                           ASTUpdateStatement jjtn006 = new ASTUpdateStatement(JJTUPDATESTATEMENT);
                                                           boolean jjtc006 = true;
                                                           jjtree.openNodeScope(jjtn006);
                                                           jjtreeOpenNodeScope(jjtn006);
      try {
        update_assignment();
      } catch (Throwable jjte006) {
                                                           if (jjtc006) {
                                                             jjtree.clearNodeScope(jjtn006);
                                                             jjtc006 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte006 instanceof RuntimeException) {
                                                             {if (true) throw (RuntimeException)jjte006;}
                                                           }
                                                           if (jjte006 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte006;}
                                                           }
                                                           {if (true) throw (Error)jjte006;}
      } finally {
                                                           if (jjtc006) {
                                                             jjtree.closeNodeScope(jjtn006,  3);
                                                             jjtreeCloseNodeScope(jjtn006);
                                                           }
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void delete_parameter() throws ParseException {
 /*@bgen(jjtree) DeleteParameter */
  ASTDeleteParameter jjtn000 = new ASTDeleteParameter(JJTDELETEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WHERE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
              ASTDeleteWhere jjtn001 = new ASTDeleteWhere(JJTDELETEWHERE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(WHERE);
          } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
              }
          }
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        expression();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void update_where() throws ParseException {
 /*@bgen(jjtree) UpdateWhere */
  ASTUpdateWhere jjtn000 = new ASTUpdateWhere(JJTUPDATEWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        expression();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void update_assignment() throws ParseException {
 /*@bgen(jjtree) UpdateAssignment */
  ASTUpdateAssignment jjtn000 = new ASTUpdateAssignment(JJTUPDATEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      assignment();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Expressions */
  final public void expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        attribute_from();
      } else if (jj_2_6(2)) {
        basic_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TUPLE:
          tuple_from();
          break;
        case WITH:
          with();
          break;
        case TCLOSE:
          tclose();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
    }
  }

  final public void attribute_from() throws ParseException {
 /*@bgen(jjtree) AttributeFrom */
  ASTAttributeFrom jjtn000 = new ASTAttributeFrom(JJTATTRIBUTEFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(FROM);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void tuple_from() throws ParseException {
 /*@bgen(jjtree) TupleFrom */
  ASTTupleFrom jjtn000 = new ASTTupleFrom(JJTTUPLEFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TUPLE);
      jj_consume_token(FROM);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void with() throws ParseException {
 /*@bgen(jjtree) With */
  ASTWith jjtn000 = new ASTWith(JJTWITH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WITH);
      jj_consume_token(LPAREN);
      name_intro_commalist();
      jj_consume_token(RPAREN);
      jj_consume_token(COLON);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void name_intro_commalist() throws ParseException {
 /*@bgen(jjtree) WithNameIntroCommalist */
  ASTWithNameIntroCommalist jjtn000 = new ASTWithNameIntroCommalist(JJTWITHNAMEINTROCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      name_intro();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        name_intro();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void name_intro() throws ParseException {
    identifier();
    jj_consume_token(ASSIGN);
                            ASTWithNameIntro jjtn001 = new ASTWithNameIntro(JJTWITHNAMEINTRO);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
    try {
      expression();
    } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
    } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtreeCloseNodeScope(jjtn001);
                            }
    }
  }

  final public void tclose() throws ParseException {
 /*@bgen(jjtree) TClose */
  ASTTClose jjtn000 = new ASTTClose(JJTTCLOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TCLOSE);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void basic_expression() throws ParseException {
    order_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case 152:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 152:
        jj_consume_token(152);
        expression();
                                                                   ASTArrayDereference jjtn001 = new ASTArrayDereference(JJTARRAYDEREFERENCE);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                   jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(153);
        } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                     jjtreeCloseNodeScope(jjtn001);
                                                                   }
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        arglist();
                                                                ASTFnInvokeAnonymous jjtn002 = new ASTFnInvokeAnonymous(JJTFNINVOKEANONYMOUS);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                                jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(RPAREN);
        } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                  jjtreeCloseNodeScope(jjtn002);
                                                                }
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
  }

  final public void order_expression() throws ParseException {
    where_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      jj_consume_token(ORDER);
      jj_consume_token(LPAREN);
      order_item_commalist();
                                                                  ASTAlgOrder jjtn001 = new ASTAlgOrder(JJTALGORDER);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
                                                                  jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                                    jjtreeCloseNodeScope(jjtn001);
                                                                  }
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
  }

  final public void where_expression() throws ParseException {
    or_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
                                    ASTAlgWhere jjtn001 = new ASTAlgWhere(JJTALGWHERE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
      try {
        or_expression();
      } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
      } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
      }
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
  }

  final public void or_expression() throws ParseException {
    xor_expression();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_22;
      }
      jj_consume_token(OR);
                                  ASTOr jjtn001 = new ASTOr(JJTOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
      try {
        xor_expression();
      } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
      }
    }
  }

  final public void xor_expression() throws ParseException {
    and_expression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_23;
      }
      jj_consume_token(XOR);
                                   ASTXor jjtn001 = new ASTXor(JJTXOR);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtreeOpenNodeScope(jjtn001);
      try {
        and_expression();
      } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte001;}
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte001;}
                                   }
                                   {if (true) throw (Error)jjte001;}
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtreeCloseNodeScope(jjtn001);
                                   }
      }
    }
  }

  final public void and_expression() throws ParseException {
    compare_expression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_24;
      }
      jj_consume_token(AND);
                                       ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
      try {
        compare_expression();
      } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
      }
    }
  }

  final public void compare_expression() throws ParseException {
    rel_diadic();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case EQ:
    case GT:
    case LT:
    case LTE:
    case GTE:
    case NEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                               ASTCompEqual jjtn001 = new ASTCompEqual(JJTCOMPEQUAL);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
        try {
          rel_diadic();
        } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
        } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtreeCloseNodeScope(jjtn001);
                               }
        }
        break;
      case NEQ:
        jj_consume_token(NEQ);
                               ASTCompNequal jjtn002 = new ASTCompNequal(JJTCOMPNEQUAL);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtreeOpenNodeScope(jjtn002);
        try {
          rel_diadic();
        } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte002;}
                               }
                               if (jjte002 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte002;}
                               }
                               {if (true) throw (Error)jjte002;}
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtreeCloseNodeScope(jjtn002);
                               }
        }
        break;
      case GTE:
        jj_consume_token(GTE);
                               ASTCompGTE jjtn003 = new ASTCompGTE(JJTCOMPGTE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                               jjtreeOpenNodeScope(jjtn003);
        try {
          rel_diadic();
        } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte003;}
                               }
                               if (jjte003 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte003;}
                               }
                               {if (true) throw (Error)jjte003;}
        } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtreeCloseNodeScope(jjtn003);
                               }
        }
        break;
      case LTE:
        jj_consume_token(LTE);
                               ASTCompLTE jjtn004 = new ASTCompLTE(JJTCOMPLTE);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
                               jjtreeOpenNodeScope(jjtn004);
        try {
          rel_diadic();
        } catch (Throwable jjte004) {
                               if (jjtc004) {
                                 jjtree.clearNodeScope(jjtn004);
                                 jjtc004 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte004 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte004;}
                               }
                               if (jjte004 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte004;}
                               }
                               {if (true) throw (Error)jjte004;}
        } finally {
                               if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004,  2);
                                 jjtreeCloseNodeScope(jjtn004);
                               }
        }
        break;
      case GT:
        jj_consume_token(GT);
                               ASTCompGT jjtn005 = new ASTCompGT(JJTCOMPGT);
                               boolean jjtc005 = true;
                               jjtree.openNodeScope(jjtn005);
                               jjtreeOpenNodeScope(jjtn005);
        try {
          rel_diadic();
        } catch (Throwable jjte005) {
                               if (jjtc005) {
                                 jjtree.clearNodeScope(jjtn005);
                                 jjtc005 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte005 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte005;}
                               }
                               if (jjte005 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte005;}
                               }
                               {if (true) throw (Error)jjte005;}
        } finally {
                               if (jjtc005) {
                                 jjtree.closeNodeScope(jjtn005,  2);
                                 jjtreeCloseNodeScope(jjtn005);
                               }
        }
        break;
      case LT:
        jj_consume_token(LT);
                               ASTCompLT jjtn006 = new ASTCompLT(JJTCOMPLT);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
                               jjtreeOpenNodeScope(jjtn006);
        try {
          rel_diadic();
        } catch (Throwable jjte006) {
                               if (jjtc006) {
                                 jjtree.clearNodeScope(jjtn006);
                                 jjtc006 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte006 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte006;}
                               }
                               if (jjte006 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte006;}
                               }
                               {if (true) throw (Error)jjte006;}
        } finally {
                               if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006,  2);
                                 jjtreeCloseNodeScope(jjtn006);
                               }
        }
        break;
      case IN:
        jj_consume_token(IN);
                               ASTTupleIn jjtn007 = new ASTTupleIn(JJTTUPLEIN);
                               boolean jjtc007 = true;
                               jjtree.openNodeScope(jjtn007);
                               jjtreeOpenNodeScope(jjtn007);
        try {
          rel_diadic();
        } catch (Throwable jjte007) {
                               if (jjtc007) {
                                 jjtree.clearNodeScope(jjtn007);
                                 jjtc007 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte007 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte007;}
                               }
                               if (jjte007 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte007;}
                               }
                               {if (true) throw (Error)jjte007;}
        } finally {
                               if (jjtc007) {
                                 jjtree.closeNodeScope(jjtn007,  2);
                                 jjtreeCloseNodeScope(jjtn007);
                               }
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  }

  final public void rel_diadic() throws ParseException {
    rel_monadic();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPOSE:
      case D_UNION:
      case I_MINUS:
      case INTERSECT:
      case JOIN:
      case MATCHING:
      case MINUS:
      case NOT:
      case SEMIJOIN:
      case SEMIMINUS:
      case TIMES:
      case UNION:
      case XUNION:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        jj_consume_token(UNION);
                                  ASTAlgUnion jjtn001 = new ASTAlgUnion(JJTALGUNION);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
        try {
          rel_monadic();
        } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
        }
        break;
      case XUNION:
        jj_consume_token(XUNION);
                               ASTAlgXunion jjtn002 = new ASTAlgXunion(JJTALGXUNION);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtreeOpenNodeScope(jjtn002);
        try {
          rel_monadic();
        } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte002;}
                               }
                               if (jjte002 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte002;}
                               }
                               {if (true) throw (Error)jjte002;}
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtreeCloseNodeScope(jjtn002);
                               }
        }
        break;
      case D_UNION:
        jj_consume_token(D_UNION);
                                    ASTAlgDUnion jjtn003 = new ASTAlgDUnion(JJTALGDUNION);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
                                    jjtreeOpenNodeScope(jjtn003);
        try {
          rel_monadic();
        } catch (Throwable jjte003) {
                                    if (jjtc003) {
                                      jjtree.clearNodeScope(jjtn003);
                                      jjtc003 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte003 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte003;}
                                    }
                                    if (jjte003 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte003;}
                                    }
                                    {if (true) throw (Error)jjte003;}
        } finally {
                                    if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003,  2);
                                      jjtreeCloseNodeScope(jjtn003);
                                    }
        }
        break;
      case INTERSECT:
        jj_consume_token(INTERSECT);
                                      ASTAlgIntersect jjtn004 = new ASTAlgIntersect(JJTALGINTERSECT);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                      jjtreeOpenNodeScope(jjtn004);
        try {
          rel_monadic();
        } catch (Throwable jjte004) {
                                      if (jjtc004) {
                                        jjtree.clearNodeScope(jjtn004);
                                        jjtc004 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte004 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte004;}
                                      }
                                      if (jjte004 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte004;}
                                      }
                                      {if (true) throw (Error)jjte004;}
        } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004,  2);
                                        jjtreeCloseNodeScope(jjtn004);
                                      }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                  ASTAlgMinus jjtn005 = new ASTAlgMinus(JJTALGMINUS);
                                  boolean jjtc005 = true;
                                  jjtree.openNodeScope(jjtn005);
                                  jjtreeOpenNodeScope(jjtn005);
        try {
          rel_monadic();
        } catch (Throwable jjte005) {
                                  if (jjtc005) {
                                    jjtree.clearNodeScope(jjtn005);
                                    jjtc005 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte005 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte005;}
                                  }
                                  if (jjte005 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte005;}
                                  }
                                  {if (true) throw (Error)jjte005;}
        } finally {
                                  if (jjtc005) {
                                    jjtree.closeNodeScope(jjtn005,  2);
                                    jjtreeCloseNodeScope(jjtn005);
                                  }
        }
        break;
      case I_MINUS:
        jj_consume_token(I_MINUS);
                                    ASTAlgIMinus jjtn006 = new ASTAlgIMinus(JJTALGIMINUS);
                                    boolean jjtc006 = true;
                                    jjtree.openNodeScope(jjtn006);
                                    jjtreeOpenNodeScope(jjtn006);
        try {
          rel_monadic();
        } catch (Throwable jjte006) {
                                    if (jjtc006) {
                                      jjtree.clearNodeScope(jjtn006);
                                      jjtc006 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte006 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte006;}
                                    }
                                    if (jjte006 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte006;}
                                    }
                                    {if (true) throw (Error)jjte006;}
        } finally {
                                    if (jjtc006) {
                                      jjtree.closeNodeScope(jjtn006,  2);
                                      jjtreeCloseNodeScope(jjtn006);
                                    }
        }
        break;
      case JOIN:
        jj_consume_token(JOIN);
                                 ASTAlgJoin jjtn007 = new ASTAlgJoin(JJTALGJOIN);
                                 boolean jjtc007 = true;
                                 jjtree.openNodeScope(jjtn007);
                                 jjtreeOpenNodeScope(jjtn007);
        try {
          rel_monadic();
        } catch (Throwable jjte007) {
                                 if (jjtc007) {
                                   jjtree.clearNodeScope(jjtn007);
                                   jjtc007 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte007 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte007;}
                                 }
                                 if (jjte007 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte007;}
                                 }
                                 {if (true) throw (Error)jjte007;}
        } finally {
                                 if (jjtc007) {
                                   jjtree.closeNodeScope(jjtn007,  2);
                                   jjtreeCloseNodeScope(jjtn007);
                                 }
        }
        break;
      case TIMES:
        jj_consume_token(TIMES);
                                  ASTAlgTimes jjtn008 = new ASTAlgTimes(JJTALGTIMES);
                                  boolean jjtc008 = true;
                                  jjtree.openNodeScope(jjtn008);
                                  jjtreeOpenNodeScope(jjtn008);
        try {
          rel_monadic();
        } catch (Throwable jjte008) {
                                  if (jjtc008) {
                                    jjtree.clearNodeScope(jjtn008);
                                    jjtc008 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte008 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte008;}
                                  }
                                  if (jjte008 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte008;}
                                  }
                                  {if (true) throw (Error)jjte008;}
        } finally {
                                  if (jjtc008) {
                                    jjtree.closeNodeScope(jjtn008,  2);
                                    jjtreeCloseNodeScope(jjtn008);
                                  }
        }
        break;
      case COMPOSE:
        jj_consume_token(COMPOSE);
                                    ASTAlgCompose jjtn009 = new ASTAlgCompose(JJTALGCOMPOSE);
                                    boolean jjtc009 = true;
                                    jjtree.openNodeScope(jjtn009);
                                    jjtreeOpenNodeScope(jjtn009);
        try {
          rel_monadic();
        } catch (Throwable jjte009) {
                                    if (jjtc009) {
                                      jjtree.clearNodeScope(jjtn009);
                                      jjtc009 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte009 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte009;}
                                    }
                                    if (jjte009 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte009;}
                                    }
                                    {if (true) throw (Error)jjte009;}
        } finally {
                                    if (jjtc009) {
                                      jjtree.closeNodeScope(jjtn009,  2);
                                      jjtreeCloseNodeScope(jjtn009);
                                    }
        }
        break;
      case MATCHING:
      case SEMIJOIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMIJOIN:
          jj_consume_token(SEMIJOIN);
          break;
        case MATCHING:
          jj_consume_token(MATCHING);
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                      ASTAlgSemijoin jjtn010 = new ASTAlgSemijoin(JJTALGSEMIJOIN);
                                                      boolean jjtc010 = true;
                                                      jjtree.openNodeScope(jjtn010);
                                                      jjtreeOpenNodeScope(jjtn010);
        try {
          rel_monadic();
        } catch (Throwable jjte010) {
                                                      if (jjtc010) {
                                                        jjtree.clearNodeScope(jjtn010);
                                                        jjtc010 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte010 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte010;}
                                                      }
                                                      if (jjte010 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte010;}
                                                      }
                                                      {if (true) throw (Error)jjte010;}
        } finally {
                                                      if (jjtc010) {
                                                        jjtree.closeNodeScope(jjtn010,  2);
                                                        jjtreeCloseNodeScope(jjtn010);
                                                      }
        }
        break;
      case NOT:
      case SEMIMINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMIMINUS:
          jj_consume_token(SEMIMINUS);
          break;
        case NOT:
          jj_consume_token(NOT);
          jj_consume_token(MATCHING);
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                             ASTAlgSemiminus jjtn011 = new ASTAlgSemiminus(JJTALGSEMIMINUS);
                                                             boolean jjtc011 = true;
                                                             jjtree.openNodeScope(jjtn011);
                                                             jjtreeOpenNodeScope(jjtn011);
        try {
          rel_monadic();
        } catch (Throwable jjte011) {
                                                             if (jjtc011) {
                                                               jjtree.clearNodeScope(jjtn011);
                                                               jjtc011 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte011 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte011;}
                                                             }
                                                             if (jjte011 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte011;}
                                                             }
                                                             {if (true) throw (Error)jjte011;}
        } finally {
                                                             if (jjtc011) {
                                                               jjtree.closeNodeScope(jjtn011,  2);
                                                               jjtreeCloseNodeScope(jjtn011);
                                                             }
        }
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void rel_monadic() throws ParseException {
    rel_project();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIVIDEBY:
    case GROUP:
    case RENAME:
    case UNGROUP:
    case UNWRAP:
    case WRAP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RENAME:
        jj_consume_token(RENAME);
        jj_consume_token(LBRACE);
        renaming_commalist();
                                                            ASTAlgRename jjtn001 = new ASTAlgRename(JJTALGRENAME);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
                                                            jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(RBRACE);
        } finally {
                                                            if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                              jjtreeCloseNodeScope(jjtn001);
                                                            }
        }
        break;
      case WRAP:
        jj_consume_token(WRAP);
                                 ASTAlgWrap jjtn002 = new ASTAlgWrap(JJTALGWRAP);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                                 jjtreeOpenNodeScope(jjtn002);
        try {
          wrapping();
        } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte002;}
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte002;}
                                 }
                                 {if (true) throw (Error)jjte002;}
        } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                   jjtreeCloseNodeScope(jjtn002);
                                 }
        }
        break;
      case UNWRAP:
        jj_consume_token(UNWRAP);
                                   ASTAlgUnwrap jjtn003 = new ASTAlgUnwrap(JJTALGUNWRAP);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                   jjtreeOpenNodeScope(jjtn003);
        try {
          identifier();
        } catch (Throwable jjte003) {
                                   if (jjtc003) {
                                     jjtree.clearNodeScope(jjtn003);
                                     jjtc003 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte003 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte003;}
                                   }
                                   if (jjte003 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte003;}
                                   }
                                   {if (true) throw (Error)jjte003;}
        } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                     jjtreeCloseNodeScope(jjtn003);
                                   }
        }
        break;
      case GROUP:
        jj_consume_token(GROUP);
        grouping();
        break;
      case UNGROUP:
        jj_consume_token(UNGROUP);
                                    ASTAlgUngroup jjtn004 = new ASTAlgUngroup(JJTALGUNGROUP);
                                    boolean jjtc004 = true;
                                    jjtree.openNodeScope(jjtn004);
                                    jjtreeOpenNodeScope(jjtn004);
        try {
          identifier();
        } catch (Throwable jjte004) {
                                    if (jjtc004) {
                                      jjtree.clearNodeScope(jjtn004);
                                      jjtc004 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte004 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte004;}
                                    }
                                    if (jjte004 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte004;}
                                    }
                                    {if (true) throw (Error)jjte004;}
        } finally {
                                    if (jjtc004) {
                                      jjtree.closeNodeScope(jjtn004,  2);
                                      jjtreeCloseNodeScope(jjtn004);
                                    }
        }
        break;
      case DIVIDEBY:
        jj_consume_token(DIVIDEBY);
        expression();
        jj_consume_token(PER);
        jj_consume_token(LPAREN);
        expression();
        divide_per_optional();
                                                                                               ASTAlgDivide jjtn005 = new ASTAlgDivide(JJTALGDIVIDE);
                                                                                               boolean jjtc005 = true;
                                                                                               jjtree.openNodeScope(jjtn005);
                                                                                               jjtreeOpenNodeScope(jjtn005);
        try {
          jj_consume_token(RPAREN);
        } finally {
                                                                                               if (jjtc005) {
                                                                                                 jjtree.closeNodeScope(jjtn005,  4);
                                                                                                 jjtreeCloseNodeScope(jjtn005);
                                                                                               }
        }
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
  }

/* Not explicitly defined in TTM3 */
  final public void order_item_commalist() throws ParseException {
 /*@bgen(jjtree) OrderItemCommalist */
  ASTOrderItemCommalist jjtn000 = new ASTOrderItemCommalist(JJTORDERITEMCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        order_item();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[87] = jj_gen;
            break label_26;
          }
          jj_consume_token(COMMA);
          order_item();
        }
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void order_item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
      jj_consume_token(ASC);
                 ASTOrderItemAsc jjtn001 = new ASTOrderItemAsc(JJTORDERITEMASC);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
      try {
        identifier();
      } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtreeCloseNodeScope(jjtn001);
                 }
      }
      break;
    case DESC:
      jj_consume_token(DESC);
                     ASTOrderItemDesc jjtn002 = new ASTOrderItemDesc(JJTORDERITEMDESC);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtreeOpenNodeScope(jjtn002);
      try {
        identifier();
      } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
      } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtreeCloseNodeScope(jjtn002);
                     }
      }
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void divide_per_optional() throws ParseException {
 /*@bgen(jjtree) AlgDividePerOptional */
  ASTAlgDividePerOptional jjtn000 = new ASTAlgDividePerOptional(JJTALGDIVIDEPEROPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expression();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void rel_project() throws ParseException {
    add_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      attribute_name_list();
                                                       ASTAlgProject jjtn001 = new ASTAlgProject(JJTALGPROJECT);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                       jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACE);
      } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                         jjtreeCloseNodeScope(jjtn001);
                                                       }
      }
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
  }

  final public void grouping() throws ParseException {
    jj_consume_token(LBRACE);
    attribute_name_list();
    jj_consume_token(RBRACE);
    jj_consume_token(AS);
                                             ASTGroup jjtn001 = new ASTGroup(JJTGROUP);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                             jjtreeOpenNodeScope(jjtn001);
    try {
      identifier();
    } catch (Throwable jjte001) {
                                             if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               {if (true) throw (RuntimeException)jjte001;}
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               {if (true) throw (ParseException)jjte001;}
                                             }
                                             {if (true) throw (Error)jjte001;}
    } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  3);
                                               jjtreeCloseNodeScope(jjtn001);
                                             }
    }
  }

  final public void wrapping() throws ParseException {
 /*@bgen(jjtree) WrappingItem */
  ASTWrappingItem jjtn000 = new ASTWrappingItem(JJTWRAPPINGITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      attribute_name_list();
      jj_consume_token(RBRACE);
      jj_consume_token(AS);
      identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void renaming_commalist() throws ParseException {
 /*@bgen(jjtree) RenamingList */
  ASTRenamingList jjtn000 = new ASTRenamingList(JJTRENAMINGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREFIX:
      case SUFFIX:
      case IDENTIFIER:
        renaming();
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[92] = jj_gen;
            break label_27;
          }
          jj_consume_token(COMMA);
          renaming();
        }
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void renaming() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      renaming_simple();
      break;
    case PREFIX:
      renaming_prefix();
      break;
    case SUFFIX:
      renaming_suffix();
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void renaming_simple() throws ParseException {
 /*@bgen(jjtree) RenamingSimple */
  ASTRenamingSimple jjtn000 = new ASTRenamingSimple(JJTRENAMINGSIMPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(AS);
      identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void renaming_prefix() throws ParseException {
 /*@bgen(jjtree) RenamingPrefix */
  ASTRenamingPrefix jjtn000 = new ASTRenamingPrefix(JJTRENAMINGPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(PREFIX);
      string_literal();
      jj_consume_token(AS);
      string_literal();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void renaming_suffix() throws ParseException {
 /*@bgen(jjtree) RenamingSuffix */
  ASTRenamingSuffix jjtn000 = new ASTRenamingSuffix(JJTRENAMINGSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SUFFIX);
      string_literal();
      jj_consume_token(AS);
      string_literal();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void attribute_name_list() throws ParseException {
 /*@bgen(jjtree) AttributeNameList */
  ASTAttributeNameList jjtn000 = new ASTAttributeNameList(JJTATTRIBUTENAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      optional_all_but();
      attribute_name_commalist();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void optional_all_but() throws ParseException {
 /*@bgen(jjtree) AllBut */
  ASTAllBut jjtn000 = new ASTAllBut(JJTALLBUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
                  ASTAllBut jjtn001 = new ASTAllBut(JJTALLBUT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(BUT);
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
        }
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void attribute_name_commalist() throws ParseException {
 /*@bgen(jjtree) AttributeNameCommalist */
  ASTAttributeNameCommalist jjtn000 = new ASTAttributeNameCommalist(JJTATTRIBUTENAMECOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[96] = jj_gen;
            break label_28;
          }
          jj_consume_token(COMMA);
          identifier();
        }
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void add_expression() throws ParseException {
    mul_expression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SUBT:
      case 154:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                               ASTAdd jjtn001 = new ASTAdd(JJTADD);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
        try {
          mul_expression();
        } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
        } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtreeCloseNodeScope(jjtn001);
                               }
        }
        break;
      case SUBT:
        jj_consume_token(SUBT);
                               ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtreeOpenNodeScope(jjtn002);
        try {
          mul_expression();
        } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte002;}
                               }
                               if (jjte002 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte002;}
                               }
                               {if (true) throw (Error)jjte002;}
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtreeCloseNodeScope(jjtn002);
                               }
        }
        break;
      case 154:
        jj_consume_token(154);
                               ASTConcatenate jjtn003 = new ASTConcatenate(JJTCONCATENATE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                               jjtreeOpenNodeScope(jjtn003);
        try {
          mul_expression();
        } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte003;}
                               }
                               if (jjte003 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte003;}
                               }
                               {if (true) throw (Error)jjte003;}
        } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtreeCloseNodeScope(jjtn003);
                               }
        }
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void mul_expression() throws ParseException {
    unary_expression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                              ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
        try {
          unary_expression();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtreeCloseNodeScope(jjtn001);
                              }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
                              ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtreeOpenNodeScope(jjtn002);
        try {
          unary_expression();
        } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
        } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtreeCloseNodeScope(jjtn002);
                              }
        }
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                        ASTUnaryNot jjtn001 = new ASTUnaryNot(JJTUNARYNOT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
      try {
        unary_expression();
      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  1);
                          jjtreeCloseNodeScope(jjtn001);
                        }
      }
      break;
    case PLUS:
      jj_consume_token(PLUS);
                        ASTUnaryPlus jjtn002 = new ASTUnaryPlus(JJTUNARYPLUS);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
      try {
        unary_expression();
      } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  1);
                          jjtreeCloseNodeScope(jjtn002);
                        }
      }
      break;
    case SUBT:
      jj_consume_token(SUBT);
                        ASTUnaryMinus jjtn003 = new ASTUnaryMinus(JJTUNARYMINUS);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
      try {
        unary_expression();
      } catch (Throwable jjte003) {
                        if (jjtc003) {
                          jjtree.clearNodeScope(jjtn003);
                          jjtc003 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte003;}
                        }
                        if (jjte003 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte003;}
                        }
                        {if (true) throw (Error)jjte003;}
      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003,  1);
                          jjtreeCloseNodeScope(jjtn003);
                        }
      }
      break;
    case AND:
    case AVG:
    case CASE:
    case COMPOSE:
    case COUNT:
    case D_UNION:
    case EXACTLY:
    case EXTEND:
    case FALSE:
    case IF:
    case INTERSECT:
    case JOIN:
    case LAMBDA:
    case MAX:
    case MIN:
    case OPERATOR:
    case OR:
    case RELATION:
    case SUMMARIZE:
    case SUM:
    case TABLE_DEE:
    case TABLE_DUM:
    case TIMES:
    case TRUE:
    case TUPLE:
    case UNION:
    case UPDATE:
    case XOR:
    case XUNION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      primary_expression();
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case LAMBDA:
    case OPERATOR:
    case RELATION:
    case TABLE_DEE:
    case TABLE_DUM:
    case TRUE:
    case TUPLE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      literal();
      break;
    default:
      jj_la1[103] = jj_gen;
      if (jj_2_7(2)) {
        aggregate_operator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXACTLY:
          exactly();
          break;
        case OR:
          nadic_or();
          break;
        case XOR:
          nadic_xor();
          break;
        case AND:
          nadic_and();
          break;
        case UNION:
          nadic_union();
          break;
        case XUNION:
          nadic_xunion();
          break;
        case D_UNION:
          nadic_disjoint_union();
          break;
        case INTERSECT:
          nadic_intersect();
          break;
        case JOIN:
          nadic_join();
          break;
        case TIMES:
          nadic_times();
          break;
        case COMPOSE:
          nadic_compose();
          break;
        case COUNT:
          nadic_count();
          break;
        case SUM:
          nadic_sum();
          break;
        case AVG:
          nadic_avg();
          break;
        case MAX:
          nadic_max();
          break;
        case MIN:
          nadic_min();
          break;
        case EXTEND:
          extend();
          break;
        case SUMMARIZE:
          summarize();
          break;
        case UPDATE:
          substitute();
          break;
        case CASE:
          case_expression();
          break;
        case IF:
          if_expression();
          break;
        default:
          jj_la1[104] = jj_gen;
          if (jj_2_8(2)) {
            fn_invoke();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              dereference();
              break;
            case LPAREN:
              jj_consume_token(LPAREN);
              expression();
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[105] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void case_expression() throws ParseException {
 /*@bgen(jjtree) CaseExpression */
  ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CASE);
      when_def_list_expr();
      jj_consume_token(ELSE);
      expression();
      jj_consume_token(END);
      jj_consume_token(CASE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void when_def_list_expr() throws ParseException {
 /*@bgen(jjtree) CaseWhenListExpression */
  ASTCaseWhenListExpression jjtn000 = new ASTCaseWhenListExpression(JJTCASEWHENLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      when_def_expr();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHEN:
          ;
          break;
        default:
          jj_la1[106] = jj_gen;
          break label_31;
        }
        when_def_expr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void when_def_expr() throws ParseException {
 /*@bgen(jjtree) CaseWhenExpression */
  ASTCaseWhenExpression jjtn000 = new ASTCaseWhenExpression(JJTCASEWHENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHEN);
      expression();
      jj_consume_token(THEN);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void if_expression() throws ParseException {
 /*@bgen(jjtree) IfExpression */
  ASTIfExpression jjtn000 = new ASTIfExpression(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      expression();
      jj_consume_token(THEN);
      expression();
      jj_consume_token(ELSE);
      expression();
      jj_consume_token(END);
      jj_consume_token(IF);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* Update expression, *not* assignment.
Contents of expression() does not change! */
  final public void substitute() throws ParseException {
 /*@bgen(jjtree) Substitute */
  ASTSubstitute jjtn000 = new ASTSubstitute(JJTSUBSTITUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(UPDATE);
      expression();
      jj_consume_token(COLON);
      update_assignment();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_optional_heading() throws ParseException {
    if (jj_2_9(2147483647)) {
                                                                    ASTNadicHeading jjtn001 = new ASTNadicHeading(JJTNADICHEADING);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
                                                                    jjtreeOpenNodeScope(jjtn001);
      try {
        heading();
      } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      {if (true) throw (RuntimeException)jjte001;}
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      {if (true) throw (ParseException)jjte001;}
                                                                    }
                                                                    {if (true) throw (Error)jjte001;}
      } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                      jjtreeCloseNodeScope(jjtn001);
                                                                    }
      }
      jj_consume_token(LBRACE);
      heading_exp_commalist();
      jj_consume_token(RBRACE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        heading_exp_commalist();
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nadic_union() throws ParseException {
 /*@bgen(jjtree) NadicUnion */
  ASTNadicUnion jjtn000 = new ASTNadicUnion(JJTNADICUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(UNION);
      nadic_optional_heading();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_xunion() throws ParseException {
 /*@bgen(jjtree) NadicXunion */
  ASTNadicXunion jjtn000 = new ASTNadicXunion(JJTNADICXUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(XUNION);
      nadic_optional_heading();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_disjoint_union() throws ParseException {
 /*@bgen(jjtree) NadicDUnion */
  ASTNadicDUnion jjtn000 = new ASTNadicDUnion(JJTNADICDUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(D_UNION);
      nadic_optional_heading();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_intersect() throws ParseException {
 /*@bgen(jjtree) NadicIntersect */
  ASTNadicIntersect jjtn000 = new ASTNadicIntersect(JJTNADICINTERSECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(INTERSECT);
      nadic_optional_heading();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_join() throws ParseException {
 /*@bgen(jjtree) NadicJoin */
  ASTNadicJoin jjtn000 = new ASTNadicJoin(JJTNADICJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(JOIN);
      jj_consume_token(LBRACE);
      heading_exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_times() throws ParseException {
 /*@bgen(jjtree) NadicTimes */
  ASTNadicTimes jjtn000 = new ASTNadicTimes(JJTNADICTIMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TIMES);
      jj_consume_token(LBRACE);
      heading_exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_compose() throws ParseException {
 /*@bgen(jjtree) NadicCompose */
  ASTNadicCompose jjtn000 = new ASTNadicCompose(JJTNADICCOMPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(COMPOSE);
      jj_consume_token(LBRACE);
      heading_exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_or() throws ParseException {
 /*@bgen(jjtree) NadicOr */
  ASTNadicOr jjtn000 = new ASTNadicOr(JJTNADICOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
      jj_consume_token(LBRACE);
      bool_exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_xor() throws ParseException {
 /*@bgen(jjtree) NadicXor */
  ASTNadicXor jjtn000 = new ASTNadicXor(JJTNADICXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(XOR);
      jj_consume_token(LBRACE);
      bool_exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_and() throws ParseException {
 /*@bgen(jjtree) NadicAnd */
  ASTNadicAnd jjtn000 = new ASTNadicAnd(JJTNADICAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
      jj_consume_token(LBRACE);
      bool_exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_count() throws ParseException {
 /*@bgen(jjtree) NadicCount */
  ASTNadicCount jjtn000 = new ASTNadicCount(JJTNADICCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(COUNT);
      jj_consume_token(LBRACE);
      exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_sum() throws ParseException {
 /*@bgen(jjtree) NadicSum */
  ASTNadicSum jjtn000 = new ASTNadicSum(JJTNADICSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SUM);
      jj_consume_token(LBRACE);
      exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_avg() throws ParseException {
 /*@bgen(jjtree) NadicAvg */
  ASTNadicAvg jjtn000 = new ASTNadicAvg(JJTNADICAVG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(AVG);
      jj_consume_token(LBRACE);
      exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_max() throws ParseException {
 /*@bgen(jjtree) NadicMax */
  ASTNadicMax jjtn000 = new ASTNadicMax(JJTNADICMAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(MAX);
      jj_consume_token(LBRACE);
      exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void nadic_min() throws ParseException {
 /*@bgen(jjtree) NadicMin */
  ASTNadicMin jjtn000 = new ASTNadicMin(JJTNADICMIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(MIN);
      jj_consume_token(LBRACE);
      exp_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void exactly() throws ParseException {
 /*@bgen(jjtree) Exactly */
  ASTExactly jjtn000 = new ASTExactly(JJTEXACTLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(EXACTLY);
      jj_consume_token(LPAREN);
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expression();
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[108] = jj_gen;
            break label_32;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void exp_commalist() throws ParseException {
 /*@bgen(jjtree) ExpressionCommalist */
  ASTExpressionCommalist jjtn000 = new ASTExpressionCommalist(JJTEXPRESSIONCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        label_33:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[110] = jj_gen;
            break label_33;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void bool_exp_commalist() throws ParseException {
 /*@bgen(jjtree) BooleanExpressionCommalist */
  ASTBooleanExpressionCommalist jjtn000 = new ASTBooleanExpressionCommalist(JJTBOOLEANEXPRESSIONCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[112] = jj_gen;
            break label_34;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void heading_exp_commalist() throws ParseException {
 /*@bgen(jjtree) HeadingExpCommalist */
  ASTHeadingExpCommalist jjtn000 = new ASTHeadingExpCommalist(JJTHEADINGEXPCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[114] = jj_gen;
            break label_35;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void extend() throws ParseException {
 /*@bgen(jjtree) Extend */
  ASTExtend jjtn000 = new ASTExtend(JJTEXTEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(EXTEND);
      expression();
      jj_consume_token(COLON);
      jj_consume_token(LBRACE);
      extend_add_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void extend_add_commalist() throws ParseException {
 /*@bgen(jjtree) ExtendList */
  ASTExtendList jjtn000 = new ASTExtendList(JJTEXTENDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      extend_add();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[116] = jj_gen;
          break label_36;
        }
        jj_consume_token(COMMA);
        extend_add();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void extend_add() throws ParseException {
 /*@bgen(jjtree) ExtendItem */
  ASTExtendItem jjtn000 = new ASTExtendItem(JJTEXTENDITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(ASSIGN);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void summarize() throws ParseException {
 /*@bgen(jjtree) Summarize */
  ASTSummarize jjtn000 = new ASTSummarize(JJTSUMMARIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SUMMARIZE);
      expression();
      per_or_by();
      jj_consume_token(COLON);
      jj_consume_token(LBRACE);
      summarize_add_commalist();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void per_or_by() throws ParseException {
 /*@bgen(jjtree) SummarizePerOrBy */
  ASTSummarizePerOrBy jjtn000 = new ASTSummarizePerOrBy(JJTSUMMARIZEPERORBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BY:
      case PER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PER:
          jj_consume_token(PER);
          jj_consume_token(LPAREN);
          expression();
                                                 ASTSummarizePer jjtn001 = new ASTSummarizePer(JJTSUMMARIZEPER);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(RPAREN);
          } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001,  1);
                                                   jjtreeCloseNodeScope(jjtn001);
                                                 }
          }
          break;
        case BY:
          jj_consume_token(BY);
          jj_consume_token(LBRACE);
          attribute_name_list();
                                                         ASTSummarizeBy jjtn002 = new ASTSummarizeBy(JJTSUMMARIZEBY);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
                                                         jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(RBRACE);
          } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  1);
                                                           jjtreeCloseNodeScope(jjtn002);
                                                         }
          }
          break;
        default:
          jj_la1[117] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[118] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void summarize_add_commalist() throws ParseException {
 /*@bgen(jjtree) SummarizeItems */
  ASTSummarizeItems jjtn000 = new ASTSummarizeItems(JJTSUMMARIZEITEMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      summarize_add();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_37;
        }
        jj_consume_token(COMMA);
        summarize_add();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void summarize_add() throws ParseException {
 /*@bgen(jjtree) SummarizeItem */
  ASTSummarizeItem jjtn000 = new ASTSummarizeItem(JJTSUMMARIZEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(ASSIGN);
      summary();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void summary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      jj_consume_token(COUNT);
      jj_consume_token(LPAREN);
                                  ASTSummarizeCount jjtn001 = new ASTSummarizeCount(JJTSUMMARIZECOUNT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
      }
      break;
    case COUNTD:
      jj_consume_token(COUNTD);
      jj_consume_token(LPAREN);
      expression();
                                            ASTSummarizeCountDistinct jjtn002 = new ASTSummarizeCountDistinct(JJTSUMMARIZECOUNTDISTINCT);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
                                            jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002,  1);
                                              jjtreeCloseNodeScope(jjtn002);
                                            }
      }
      break;
    case SUM:
      jj_consume_token(SUM);
      jj_consume_token(LPAREN);
      expression();
                                         ASTSummarizeSum jjtn003 = new ASTSummarizeSum(JJTSUMMARIZESUM);
                                         boolean jjtc003 = true;
                                         jjtree.openNodeScope(jjtn003);
                                         jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                         if (jjtc003) {
                                           jjtree.closeNodeScope(jjtn003,  1);
                                           jjtreeCloseNodeScope(jjtn003);
                                         }
      }
      break;
    case SUMD:
      jj_consume_token(SUMD);
      jj_consume_token(LPAREN);
      expression();
                                          ASTSummarizeSumDistinct jjtn004 = new ASTSummarizeSumDistinct(JJTSUMMARIZESUMDISTINCT);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                          jjtreeOpenNodeScope(jjtn004);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  1);
                                            jjtreeCloseNodeScope(jjtn004);
                                          }
      }
      break;
    case AVG:
      jj_consume_token(AVG);
      jj_consume_token(LPAREN);
      expression();
                                         ASTSummarizeAvg jjtn005 = new ASTSummarizeAvg(JJTSUMMARIZEAVG);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
                                         jjtreeOpenNodeScope(jjtn005);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005,  1);
                                           jjtreeCloseNodeScope(jjtn005);
                                         }
      }
      break;
    case AVGD:
      jj_consume_token(AVGD);
      jj_consume_token(LPAREN);
      expression();
                                          ASTSummarizeAvgDistinct jjtn006 = new ASTSummarizeAvgDistinct(JJTSUMMARIZEAVGDISTINCT);
                                          boolean jjtc006 = true;
                                          jjtree.openNodeScope(jjtn006);
                                          jjtreeOpenNodeScope(jjtn006);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                          if (jjtc006) {
                                            jjtree.closeNodeScope(jjtn006,  1);
                                            jjtreeCloseNodeScope(jjtn006);
                                          }
      }
      break;
    case MAX:
      jj_consume_token(MAX);
      jj_consume_token(LPAREN);
      expression();
                                         ASTSummarizeMax jjtn007 = new ASTSummarizeMax(JJTSUMMARIZEMAX);
                                         boolean jjtc007 = true;
                                         jjtree.openNodeScope(jjtn007);
                                         jjtreeOpenNodeScope(jjtn007);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                         if (jjtc007) {
                                           jjtree.closeNodeScope(jjtn007,  1);
                                           jjtreeCloseNodeScope(jjtn007);
                                         }
      }
      break;
    case MIN:
      jj_consume_token(MIN);
      jj_consume_token(LPAREN);
      expression();
                                         ASTSummarizeMin jjtn008 = new ASTSummarizeMin(JJTSUMMARIZEMIN);
                                         boolean jjtc008 = true;
                                         jjtree.openNodeScope(jjtn008);
                                         jjtreeOpenNodeScope(jjtn008);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                         if (jjtc008) {
                                           jjtree.closeNodeScope(jjtn008,  1);
                                           jjtreeCloseNodeScope(jjtn008);
                                         }
      }
      break;
    case AND:
      jj_consume_token(AND);
      jj_consume_token(LPAREN);
      expression();
                                         ASTSummarizeAnd jjtn009 = new ASTSummarizeAnd(JJTSUMMARIZEAND);
                                         boolean jjtc009 = true;
                                         jjtree.openNodeScope(jjtn009);
                                         jjtreeOpenNodeScope(jjtn009);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                         if (jjtc009) {
                                           jjtree.closeNodeScope(jjtn009,  1);
                                           jjtreeCloseNodeScope(jjtn009);
                                         }
      }
      break;
    case OR:
      jj_consume_token(OR);
      jj_consume_token(LPAREN);
      expression();
                                        ASTSummarizeOr jjtn010 = new ASTSummarizeOr(JJTSUMMARIZEOR);
                                        boolean jjtc010 = true;
                                        jjtree.openNodeScope(jjtn010);
                                        jjtreeOpenNodeScope(jjtn010);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                        if (jjtc010) {
                                          jjtree.closeNodeScope(jjtn010,  1);
                                          jjtreeCloseNodeScope(jjtn010);
                                        }
      }
      break;
    case XOR:
      jj_consume_token(XOR);
      jj_consume_token(LPAREN);
      expression();
                                         ASTSummarizeXor jjtn011 = new ASTSummarizeXor(JJTSUMMARIZEXOR);
                                         boolean jjtc011 = true;
                                         jjtree.openNodeScope(jjtn011);
                                         jjtreeOpenNodeScope(jjtn011);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                         if (jjtc011) {
                                           jjtree.closeNodeScope(jjtn011,  1);
                                           jjtreeCloseNodeScope(jjtn011);
                                         }
      }
      break;
    case EXACTLY:
      jj_consume_token(EXACTLY);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                              ASTSummarizeExactly jjtn012 = new ASTSummarizeExactly(JJTSUMMARIZEEXACTLY);
                                                              boolean jjtc012 = true;
                                                              jjtree.openNodeScope(jjtn012);
                                                              jjtreeOpenNodeScope(jjtn012);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                              if (jjtc012) {
                                                                jjtree.closeNodeScope(jjtn012,  2);
                                                                jjtreeCloseNodeScope(jjtn012);
                                                              }
      }
      break;
    case EXACTLYD:
      jj_consume_token(EXACTLYD);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                               ASTSummarizeExactlyDistinct jjtn013 = new ASTSummarizeExactlyDistinct(JJTSUMMARIZEEXACTLYDISTINCT);
                                                               boolean jjtc013 = true;
                                                               jjtree.openNodeScope(jjtn013);
                                                               jjtreeOpenNodeScope(jjtn013);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                               if (jjtc013) {
                                                                 jjtree.closeNodeScope(jjtn013,  2);
                                                                 jjtreeCloseNodeScope(jjtn013);
                                                               }
      }
      break;
    case UNION:
      jj_consume_token(UNION);
      jj_consume_token(LPAREN);
      expression();
                                           ASTSummarizeUnion jjtn014 = new ASTSummarizeUnion(JJTSUMMARIZEUNION);
                                           boolean jjtc014 = true;
                                           jjtree.openNodeScope(jjtn014);
                                           jjtreeOpenNodeScope(jjtn014);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                           if (jjtc014) {
                                             jjtree.closeNodeScope(jjtn014,  1);
                                             jjtreeCloseNodeScope(jjtn014);
                                           }
      }
      break;
    case XUNION:
      jj_consume_token(XUNION);
      jj_consume_token(LPAREN);
      expression();
                                            ASTSummarizeXunion jjtn015 = new ASTSummarizeXunion(JJTSUMMARIZEXUNION);
                                            boolean jjtc015 = true;
                                            jjtree.openNodeScope(jjtn015);
                                            jjtreeOpenNodeScope(jjtn015);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                            if (jjtc015) {
                                              jjtree.closeNodeScope(jjtn015,  1);
                                              jjtreeCloseNodeScope(jjtn015);
                                            }
      }
      break;
    case D_UNION:
      jj_consume_token(D_UNION);
      jj_consume_token(LPAREN);
      expression();
                                             ASTSummarizeDUnion jjtn016 = new ASTSummarizeDUnion(JJTSUMMARIZEDUNION);
                                             boolean jjtc016 = true;
                                             jjtree.openNodeScope(jjtn016);
                                             jjtreeOpenNodeScope(jjtn016);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                             if (jjtc016) {
                                               jjtree.closeNodeScope(jjtn016,  1);
                                               jjtreeCloseNodeScope(jjtn016);
                                             }
      }
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
      jj_consume_token(LPAREN);
      expression();
                                               ASTSummarizeIntersect jjtn017 = new ASTSummarizeIntersect(JJTSUMMARIZEINTERSECT);
                                               boolean jjtc017 = true;
                                               jjtree.openNodeScope(jjtn017);
                                               jjtreeOpenNodeScope(jjtn017);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                               if (jjtc017) {
                                                 jjtree.closeNodeScope(jjtn017,  1);
                                                 jjtreeCloseNodeScope(jjtn017);
                                               }
      }
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fn_invoke() throws ParseException {
 /*@bgen(jjtree) FnInvoke */
  ASTFnInvoke jjtn000 = new ASTFnInvoke(JJTFNINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LPAREN);
      arglist();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void arglist() throws ParseException {
 /*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[121] = jj_gen;
            break label_38;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void aggregate_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      jj_consume_token(COUNT);
      jj_consume_token(LPAREN);
      expression();
                                           ASTAggCount jjtn001 = new ASTAggCount(JJTAGGCOUNT);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                           jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  1);
                                             jjtreeCloseNodeScope(jjtn001);
                                           }
      }
      break;
    case SUM:
      jj_consume_token(SUM);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                          ASTAggSum jjtn002 = new ASTAggSum(JJTAGGSUM);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                          jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                            jjtreeCloseNodeScope(jjtn002);
                                                          }
      }
      break;
    case AVG:
      jj_consume_token(AVG);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                          ASTAggAvg jjtn003 = new ASTAggAvg(JJTAGGAVG);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                          jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                            jjtreeCloseNodeScope(jjtn003);
                                                          }
      }
      break;
    case MAX:
      jj_consume_token(MAX);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                          ASTAggMax jjtn004 = new ASTAggMax(JJTAGGMAX);
                                                          boolean jjtc004 = true;
                                                          jjtree.openNodeScope(jjtn004);
                                                          jjtreeOpenNodeScope(jjtn004);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                          if (jjtc004) {
                                                            jjtree.closeNodeScope(jjtn004,  2);
                                                            jjtreeCloseNodeScope(jjtn004);
                                                          }
      }
      break;
    case MIN:
      jj_consume_token(MIN);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                          ASTAggMin jjtn005 = new ASTAggMin(JJTAGGMIN);
                                                          boolean jjtc005 = true;
                                                          jjtree.openNodeScope(jjtn005);
                                                          jjtreeOpenNodeScope(jjtn005);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                          if (jjtc005) {
                                                            jjtree.closeNodeScope(jjtn005,  2);
                                                            jjtreeCloseNodeScope(jjtn005);
                                                          }
      }
      break;
    case AND:
      jj_consume_token(AND);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                          ASTAggAnd jjtn006 = new ASTAggAnd(JJTAGGAND);
                                                          boolean jjtc006 = true;
                                                          jjtree.openNodeScope(jjtn006);
                                                          jjtreeOpenNodeScope(jjtn006);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                          if (jjtc006) {
                                                            jjtree.closeNodeScope(jjtn006,  2);
                                                            jjtreeCloseNodeScope(jjtn006);
                                                          }
      }
      break;
    case OR:
      jj_consume_token(OR);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                         ASTAggOr jjtn007 = new ASTAggOr(JJTAGGOR);
                                                         boolean jjtc007 = true;
                                                         jjtree.openNodeScope(jjtn007);
                                                         jjtreeOpenNodeScope(jjtn007);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                         if (jjtc007) {
                                                           jjtree.closeNodeScope(jjtn007,  2);
                                                           jjtreeCloseNodeScope(jjtn007);
                                                         }
      }
      break;
    case XOR:
      jj_consume_token(XOR);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                          ASTAggXor jjtn008 = new ASTAggXor(JJTAGGXOR);
                                                          boolean jjtc008 = true;
                                                          jjtree.openNodeScope(jjtn008);
                                                          jjtreeOpenNodeScope(jjtn008);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                          if (jjtc008) {
                                                            jjtree.closeNodeScope(jjtn008,  2);
                                                            jjtreeCloseNodeScope(jjtn008);
                                                          }
      }
      break;
    case UNION:
      jj_consume_token(UNION);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                            ASTAggUnion jjtn009 = new ASTAggUnion(JJTAGGUNION);
                                                            boolean jjtc009 = true;
                                                            jjtree.openNodeScope(jjtn009);
                                                            jjtreeOpenNodeScope(jjtn009);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                            if (jjtc009) {
                                                              jjtree.closeNodeScope(jjtn009,  2);
                                                              jjtreeCloseNodeScope(jjtn009);
                                                            }
      }
      break;
    case XUNION:
      jj_consume_token(XUNION);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                             ASTAggXunion jjtn010 = new ASTAggXunion(JJTAGGXUNION);
                                                             boolean jjtc010 = true;
                                                             jjtree.openNodeScope(jjtn010);
                                                             jjtreeOpenNodeScope(jjtn010);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                             if (jjtc010) {
                                                               jjtree.closeNodeScope(jjtn010,  2);
                                                               jjtreeCloseNodeScope(jjtn010);
                                                             }
      }
      break;
    case D_UNION:
      jj_consume_token(D_UNION);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                              ASTAggDUnion jjtn011 = new ASTAggDUnion(JJTAGGDUNION);
                                                              boolean jjtc011 = true;
                                                              jjtree.openNodeScope(jjtn011);
                                                              jjtreeOpenNodeScope(jjtn011);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                              if (jjtc011) {
                                                                jjtree.closeNodeScope(jjtn011,  2);
                                                                jjtreeCloseNodeScope(jjtn011);
                                                              }
      }
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(COMMA);
      expression();
                                                                ASTAggIntersect jjtn012 = new ASTAggIntersect(JJTAGGINTERSECT);
                                                                boolean jjtc012 = true;
                                                                jjtree.openNodeScope(jjtn012);
                                                                jjtreeOpenNodeScope(jjtn012);
      try {
        jj_consume_token(RPAREN);
      } finally {
                                                                if (jjtc012) {
                                                                  jjtree.closeNodeScope(jjtn012,  2);
                                                                  jjtreeCloseNodeScope(jjtn012);
                                                                }
      }
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAMBDA:
    case OPERATOR:
      lambda();
      break;
    case TUPLE:
      tuple();
      break;
    case RELATION:
    case TABLE_DEE:
    case TABLE_DUM:
      relation();
      break;
    case INTEGER_LITERAL:
      integer();
      break;
    case STRING_LITERAL:
      character();
      break;
    case FLOATING_POINT_LITERAL:
      rational();
      break;
    case FALSE:
    case TRUE:
      bool();
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void tuple() throws ParseException {
 /*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TUPLE);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        tuple_component_commalist();
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void tuple_component_commalist() throws ParseException {
    tuple_component();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      tuple_component();
    }
  }

  final public void tuple_component() throws ParseException {
 /*@bgen(jjtree) TupleComponent */
  ASTTupleComponent jjtn000 = new ASTTupleComponent(JJTTUPLECOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void relation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATION:
      jj_consume_token(RELATION);
      relation_heading();
      jj_consume_token(LBRACE);
      tuple_exp_commalist();
                                                                          ASTRelation jjtn001 = new ASTRelation(JJTRELATION);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
                                                                          jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACE);
      } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                                            jjtreeCloseNodeScope(jjtn001);
                                                                          }
      }
      break;
    case TABLE_DUM:
                  ASTRelationDum jjtn002 = new ASTRelationDum(JJTRELATIONDUM);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(TABLE_DUM);
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                  }
      }
      break;
    case TABLE_DEE:
                  ASTRelationDee jjtn003 = new ASTRelationDee(JJTRELATIONDEE);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(TABLE_DEE);
      } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtreeCloseNodeScope(jjtn003);
                  }
      }
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void relation_heading() throws ParseException {
 /*@bgen(jjtree) RelationHeading */
  ASTRelationHeading jjtn000 = new ASTRelationHeading(JJTRELATIONHEADING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_10(2147483647)) {
        heading();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void heading() throws ParseException {
 /*@bgen(jjtree) Heading */
  ASTHeading jjtn000 = new ASTHeading(JJTHEADING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        attribute_spec_commalist();
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void tuple_exp_commalist() throws ParseException {
 /*@bgen(jjtree) TupleExpressionCommalist */
  ASTTupleExpressionCommalist jjtn000 = new ASTTupleExpressionCommalist(JJTTUPLEEXPRESSIONCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AVG:
      case CASE:
      case COMPOSE:
      case COUNT:
      case D_UNION:
      case EXACTLY:
      case EXTEND:
      case FALSE:
      case IF:
      case INTERSECT:
      case JOIN:
      case LAMBDA:
      case MAX:
      case MIN:
      case NOT:
      case OPERATOR:
      case OR:
      case RELATION:
      case SUMMARIZE:
      case SUM:
      case TABLE_DEE:
      case TABLE_DUM:
      case TCLOSE:
      case TIMES:
      case TRUE:
      case TUPLE:
      case UNION:
      case UPDATE:
      case WITH:
      case XOR:
      case XUNION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[129] = jj_gen;
            break label_40;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[130] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void attribute_spec_commalist() throws ParseException {
    attribute_spec();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      attribute_spec();
    }
  }

  final public void attribute_spec() throws ParseException {
 /*@bgen(jjtree) AttributeSpec */
  ASTAttributeSpec jjtn000 = new ASTAttributeSpec(JJTATTRIBUTESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      type_ref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtreeCloseNodeScope(jjtn000);
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void dereference() throws ParseException {
 /*@bgen(jjtree) Dereference */
 ASTDereference jjtn000 = new ASTDereference(JJTDEREFERENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtreeCloseNodeScope(jjtn000);
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void character() throws ParseException {
 /*@bgen(jjtree) Character */
 ASTCharacter jjtn000 = new ASTCharacter(JJTCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                              jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void string_literal() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
 ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                              jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void integer() throws ParseException {
 /*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtreeCloseNodeScope(jjtn000);
                               jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void rational() throws ParseException {
 /*@bgen(jjtree) Rational */
 ASTRational jjtn000 = new ASTRational(JJTRATIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtreeCloseNodeScope(jjtn000);
                                      jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
                  ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
      break;
    case FALSE:
                  ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                  }
      }
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_486() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_485()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_469() {
    if (jj_3R_477()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_478()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_293()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(SUMMARIZE)) return true;
    if (jj_3R_85()) return true;
    if (jj_3R_287()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_288()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(CONSTRAINT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_scan_token(CONSTRAINT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_474() {
    if (jj_3R_473()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_293()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_294()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_3R_53()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(EXTEND)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_286()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_480() {
    if (jj_3R_485()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_486()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_471() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_480()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_481() {
    if (jj_3R_487()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_472() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_481()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_301()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_470() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_479()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(POSSREP)) return true;
    if (jj_3R_470()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_471()) return true;
    if (jj_3R_472()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(EXACTLY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_285()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_3R_469()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(INIT)) return true;
    if (jj_3R_473()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_474()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_285()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_3R_467()) return true;
    return false;
  }

  private boolean jj_3R_476() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_475()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(AVG)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_285()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_285()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_285()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_475() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_284()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_468() {
    if (jj_3R_475()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_476()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(XOR)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_284()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_482()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_3R_468()) return true;
    if (jj_3R_469()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_284()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_3R_425()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(COMPOSE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_53()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(JOIN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_459() {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_465()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_458() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_458()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(D_UNION)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_436() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_446()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_464() {
    if (jj_scan_token(ORDERED)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(XUNION)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_463() {
    if (jj_scan_token(ORDINAL)) return true;
    return false;
  }

  private boolean jj_3R_457() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_463()) {
    jj_scanpos = xsp;
    if (jj_3R_464()) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(UNION)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_3R_457()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_435() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_445()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(RETURNS)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_459()) return true;
    return false;
  }

  private boolean jj_3R_437() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_447()) {
    jj_scanpos = xsp;
    if (jj_3R_448()) return true;
    }
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_3R_435()) return true;
    if (jj_3R_436()) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_411()) {
    jj_scanpos = xsp;
    if (jj_3R_412()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(FOREIGN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDFOREIGN)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_264()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_298()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_250()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_scan_token(CONSTRAINT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_413()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_125()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_230()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_125()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(DROP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) {
    jj_scanpos = xsp;
    if (jj_3R_394()) {
    jj_scanpos = xsp;
    if (jj_3R_395()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(SUBT)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_456() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_462()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(154)) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_337()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(SUBT)) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_scan_token(SYNONYMS)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_456()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_410()) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_466()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_455() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_461()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_53()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_337()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_338()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_172()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_409()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_400()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(ALL)) return true;
    if (jj_scan_token(BUT)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_339()) return true;
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_scan_token(ALL)) return true;
    if (jj_scan_token(BUT)) return true;
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_238()) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_scan_token(VERSION)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_434()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(SUFFIX)) return true;
    if (jj_3R_281()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_3R_444()) return true;
    return false;
  }

  private boolean jj_3R_422() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_433()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(PREFIX)) return true;
    if (jj_3R_281()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_scan_token(UPDATES)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_443()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_421() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_432()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_scan_token(RETURNS)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_253()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_3R_421()) return true;
    if (jj_3R_422()) return true;
    if (jj_3R_423()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_326()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(FOREIGN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_424()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDFOREIGN)) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_325()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(RETURNS)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_161()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_3R_339()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(LAMBDA)) return true;
    if (jj_3R_279()) return true;
    if (jj_scan_token(LAMBDAEND)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_279()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_325()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(MATCHING)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(DESC)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(DIVIDEBY)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(PER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_3R_214()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(UNGROUP)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_scan_token(BEGIN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(UNWRAP)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(ASC)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(WRAP)) return true;
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(RENAME)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_211()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(COMPOSE)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(I_MINUS)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_370()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(D_UNION)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_143()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_scan_token(ANNOUNCE)) return true;
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(UNION)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(XUNION)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_scan_token(OUTPUT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(WRITELN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_382()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_381()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_380()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_379()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_3R_378()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_3R_377()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_376()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_3R_375()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_374()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_128()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_373()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(152)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_372()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_371()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_122()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_369()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_368()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_365()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_127()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(TCLOSE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_341()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(TUPLE)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  private boolean jj_3R_335() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_331()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_3R_407()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(I_DELETE)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(D_INSERT)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_406()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_128()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_scan_token(LEAVE)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_339()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_339()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_339()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_363() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_384()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_339()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_339()) return true;
    if (jj_3R_403()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_339()) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_3R_417()) return true;
    return false;
  }

  private boolean jj_3R_402() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_339()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_3R_417()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_418()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(CASE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_401()) return true;
    if (jj_3R_402()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_scan_token(ROLLBACK)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_scan_token(COMMIT)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(BEGIN)) return true;
    if (jj_scan_token(TRANSACTION)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_scan_token(LOAD)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(SAME_HEADING_AS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(RELATION)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(TUPLE)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_53()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(SAME_TYPE_AS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_454() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(TABLE_DEE)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_scan_token(CONSTRAINT)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(TABLE_DUM)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_327()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(RELATION)) return true;
    if (jj_3R_280()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_307()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_scan_token(INIT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_scan_token(INIT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_306()) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_3R_450()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_53()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_449()) return true;
    return false;
  }

  private boolean jj_3R_426() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_3R_439()) return true;
    }
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_460()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_327()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(TUPLE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_3R_426()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_452() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_scan_token(KEY)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(D_UNION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(XUNION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_453() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(UNION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(XOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_441() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_453()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_scan_token(EXTERNAL)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_281()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_454()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(AVG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_3R_451()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_452()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_442()) return true;
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_scan_token(VIRTUAL)) return true;
    if (jj_3R_85()) return true;
    if (jj_3R_441()) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_3R_426()) return true;
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_416()) return true;
    return false;
  }

  private boolean jj_3R_427() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_3R_426()) return true;
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_416() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_427()) {
    jj_scanpos = xsp;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_415()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_414()) return true;
    return false;
  }

  private boolean jj_3R_490() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_489()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(D_UNION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(XUNION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_128()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(UNION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(EXACTLYD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(EXACTLY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(XOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_scan_token(AVGD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(AVG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(SUMD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(COUNTD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_489() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_478() {
    if (jj_3R_477()) return true;
    return false;
  }

  private boolean jj_3R_484() {
    if (jj_3R_489()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_490()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(BY)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_3R_303()) return true;
    }
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(PER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_488() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_483() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_488()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_296()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_477() {
    if (jj_scan_token(POSSREP)) return true;
    if (jj_3R_483()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_484()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TutorialDTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[133];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x1,0x25c81000,0x1,0x0,0x0,0x0,0x0,0x4000000,0x1c81000,0xa810800,0x25c81000,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x25c81000,0xa810800,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x42000,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0xa810800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x80000000,0x80000000,0x0,0x40008000,0x40008000,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0xa810800,0x0,0xa810800,0x0,0x0,0x0,0x0,0x0,0x0,0xa810800,0x0,0xa810800,0x0,0xa810800,0x0,0x200000,0x200000,0x0,0x18030800,0x0,0xa810800,0x8010800,0x0,0x0,0x0,0x0,0x0,0x0,0xa810800,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x40,0x184a4207,0x40,0x0,0x0,0x0,0x0,0x10004003,0x8080200,0x22881508,0x184a4207,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x184a4207,0x22881508,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200800,0x0,0x800,0x0,0x4000000,0x4000000,0x200000,0x200000,0x0,0x0,0x0,0x10,0x10,0x0,0x4001,0x0,0x420004,0x0,0x22881508,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x82840008,0x80000000,0x0,0x82840008,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22881508,0x20001000,0x2880508,0x0,0x0,0x0,0x0,0x0,0x0,0x22881508,0x0,0x22881508,0x0,0x22881508,0x0,0x0,0x0,0x0,0x800188,0x0,0x22881508,0x800008,0x20001000,0x0,0x0,0x0,0x0,0x0,0x22881508,0x0,0x1000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x940210,0x0,0x0,0x0,0x0,0x40000000,0x10,0x940200,0xb001011b,0x940210,0x40000000,0x10,0x0,0x80000,0x0,0x0,0x40000000,0x0,0x940210,0xb001011b,0x0,0x0,0x0,0x0,0x0,0x10,0x80000,0x0,0x410010,0x0,0x0,0xc0,0xc0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x41e010,0x8000,0xe000,0x0,0x0,0x0,0x410010,0x0,0x410010,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb001011b,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x100,0x0,0x0,0x0,0x0,0x300000c,0x1000000,0x2000008,0x300000c,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x4001000,0x4001000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb001011b,0x80010010,0x30000103,0x0,0x0,0x0,0x0,0x0,0x0,0xb001011b,0x0,0xb001011b,0x0,0xb001011b,0x0,0x400,0x400,0x0,0x28000103,0x0,0xb001011b,0x20000103,0x80010010,0x0,0x0,0x80010000,0x0,0x0,0xb001011b,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0xc86100,0x0,0x0,0x0,0x0,0x9000,0x84100,0xc00000,0x471024cb,0xc86100,0x9000,0x0,0x0,0x0,0x0,0x1000,0x0,0x8000,0xc86100,0x471024cb,0x0,0x0,0x0,0x0,0x0,0x4100,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10080,0x0,0x10000,0x0,0x0,0x0,0x80,0x0,0x80,0x0,0x20000,0x0,0x0,0x0,0x80000,0x0,0x2000,0x40000,0x471424cb,0x40000,0x100082,0x0,0x0,0x0,0x0,0x40000,0x0,0x1000000,0x0,0x0,0x0,0x2000408,0x0,0x0,0x2000408,0x200a00,0x200a00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x470024c9,0x440000c1,0x3002408,0x0,0x20000,0x0,0x0,0x0,0x0,0x471024cb,0x0,0x471024cb,0x0,0x471024cb,0x0,0x0,0x0,0x0,0x3000400,0x0,0x471024cb,0x3000400,0x440000c1,0x0,0x0,0x1,0x0,0x0,0x471024cb,0x0,0x40,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x2,0x0,0x200,0x2,0x800000,0x102,0x2,0x0,0xc0013,0x2,0x102,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x2,0xc0013,0x200,0x2,0x200,0x2,0x200,0x0,0x0,0x200,0x2,0x800000,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x200,0x0,0x2,0x0,0x2,0x0,0x200,0x2,0x0,0x2,0x200,0x2,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x2,0x40,0x0,0x0,0x0,0x2,0x0,0x200,0x2,0x0,0xc0013,0x0,0x0,0x200,0x1000010,0x1000010,0x0,0x0,0x0,0x0,0x0,0x3f000,0x3f000,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x40,0x200,0x2,0x2,0x0,0x200,0x2,0x40c0000,0x40c0000,0x300000,0x300000,0xc0013,0x1,0x0,0x12,0x0,0x40,0x200,0x200,0x200,0xc0013,0x200,0xc0013,0x200,0xc0013,0x200,0x0,0x0,0x200,0x0,0x200,0xc0013,0x0,0x1,0x2,0x200,0x0,0x2,0x200,0xc0013,0x200,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TutorialD(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TutorialD(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TutorialDTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TutorialD(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TutorialDTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TutorialD(TutorialDTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TutorialDTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[155];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 133; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 155; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
