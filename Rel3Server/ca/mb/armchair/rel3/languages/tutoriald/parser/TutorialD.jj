/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TutorialD.jj */
/*@egen*//*
 * Rel implementation of Tutorial D from TTM 3rd Edition
 *
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
               
                         
                 
                           
                                                                       
                                                                  
                                     
  JDK_VERSION = "1.6";
}

PARSER_BEGIN(TutorialD)
package ca.mb.armchair.rel3.languages.tutoriald.parser;
public class TutorialD/*@bgen(jjtree)*/implements TutorialDTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTutorialDState jjtree = new JJTTutorialDState();

/*@egen*/
  void jjtreeOpenNodeScope( Node node )
  {
    ((ca.mb.armchair.rel3.languages.tutoriald.BaseASTNode)node).first_token = getToken(1);
  }

  void jjtreeCloseNodeScope( Node node )
  {
    ((ca.mb.armchair.rel3.languages.tutoriald.BaseASTNode)node).last_token = getToken(0);
  }
}
PARSER_END(TutorialD)

/*
 *
 * Lexer definitions
 *
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN [IGNORE_CASE] : /* RESERVED WORDS AND LITERALS */
{
  < ADD: "ADD" >
| < ALL: "ALL" >
| < AND: "AND" >
| < ANNOUNCE: "ANNOUNCE" >
| < ARRAY: "ARRAY" >
| < AS: "AS" >
| < ASC: "ASC" >
| < AVG: "AVG" >
| < AVGD: "AVGD" >
| < BASE: "BASE" >
| < BEGIN: "BEGIN" >
| < BUT: "BUT" >
| < BY: "BY" >
| < CALL: "CALL" >
| < CASE: "CASE" >
| < COMMIT: "COMMIT" >
| < COMPOSE: "COMPOSE" >
| < CONSTRAINT: "CONSTRAINT" >
| < COUNT: "COUNT" >
| < COUNTD: "COUNTD" >
| < DELETE: "DELETE" >
| < DESC: "DESC" >
| < DIVIDEBY: "DIVIDEBY" >
| < DO: "DO" >
| < DROP: "DROP" >
| < D_INSERT: "D_INSERT" >
| < D_UNION: "D_UNION" >
| < ELSE: "ELSE" >
| < END: "END" >
| < EOT: "<EOT>" >
| < EXACTLYD: "EXACTLYD" >
| < EXACTLY: "EXACTLY" >
| < EXECUTE: "EXECUTE" >
| < EXTEND: "EXTEND" >
| < EXTERNAL: "EXTERNAL" >
| < FALSE: "FALSE" >
| < FOREIGN: "FOREIGN" >: SCRIPT
| < FOR: "FOR" >
| < FROM: "FROM" >
| < GROUP: "GROUP" >
| < I_DELETE: "I_DELETE" >
| < I_MINUS: "I_MINUS" >
| < IF: "IF" >
| < IN: "IN" >
| < INIT: "INIT" >
| < INSERT: "INSERT" >
| < INTERSECT: "INTERSECT" >
| < IS: "IS" >
| < JOIN: "JOIN" >
| < KEY: "KEY" >
| < LEAVE: "LEAVE" >
| < LOAD: "LOAD" >
| < LAMBDA: "~[" >
| < LAMBDAEND: "]~" >
| < MATCHING: "MATCHING" >
| < MAX: "MAX" >
| < MIN: "MIN" >
| < MINUS: "MINUS" >
| < NOT: "NOT" >
| < OPERATOR: "OPERATOR" >
| < ORDER: "ORDER" >
| < ORDERED: "ORDERED" >
| < ORDINAL: "ORDINAL" >
| < OR: "OR" >
| < OUTPUT: "OUTPUT" >
| < PER: "PER" >
| < POSSREP: "POSSREP" >
| < PREFIX: "PREFIX" >
| < PRIVATE: "PRIVATE" >
| < PUBLIC: "PUBLIC" >
| < REAL: "REAL" >
| < RELATION: ( "RELATION" | "REL" ) >
| < RENAME: "RENAME" >
| < RETURN: "RETURN" >
| < RETURNS: "RETURNS" >
| < ROLLBACK: "ROLLBACK" >
| < SAME_HEADING_AS: "SAME_HEADING_AS" >
| < SAME_TYPE_AS: "SAME_TYPE_AS" >
| < SET: "SET" >
| < SEMIJOIN: "SEMIJOIN" > 
| < SEMIMINUS: "SEMIMINUS" >
| < SUFFIX: "SUFFIX" >
| < SUMD: "SUMD" >
| < SUMMARIZE: "SUMMARIZE" >
| < SUM: "SUM" >
| < SYNONYMS: "SYNONYMS" >
| < TABLE_DEE: ( "DEE" | "TABLE_DEE" ) >
| < TABLE_DUM: ( "DUM" | "TABLE_DUM" ) >
| < TCLOSE: "TCLOSE" >
| < THEN: "THEN" >
| < TIMES: "TIMES" >
| < TO: "TO" >
| < TRANSACTION: "TRANSACTION" >
| < TRUE: "TRUE" >
| < TUPLE: ( "TUPLE" | "TUP" ) >
| < TYPE: "TYPE" >
| < UNGROUP: "UNGROUP" >
| < UNION: "UNION" >
| < UNWRAP: "UNWRAP" >
| < UPDATES: "UPDATES" >
| < UPDATE: "UPDATE" >
| < VAR: "VAR" >
| < VERSION: "VERSION" >
| < VIRTUAL: ( "VIRTUAL" | "VIEW" ) >
| < WHEN: "WHEN" >
| < WHERE: "WHERE" >
| < WHILE: "WHILE" >
| < WITH: "WITH" >
| < WRAP: "WRAP" >
| < WRITE: "WRITE" >
| < WRITELN: "WRITELN" >
| < XOR: "XOR" >
| < XUNION: "XUNION" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
     ( 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
     )
   | (
      "'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
     )
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"."|"#")* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < COLON: ":" >
}

TOKEN : /* OPERATOR SYMBOLS */
{
  < ASSIGN: ":=" >
| < EQ: "=" >
| < GT: ">" >
| < LT: "<" >
| < LTE: "<=" >
| < GTE: ">=" >
| < NEQ: "<>" >
| < PLUS: "+" >
| < SUBT: "-" >
| < STAR: "*" >
| < SLASH: "/" >
}

<SCRIPT> TOKEN: /* Source code grabber */
{
	< ENDFOREIGN : "\nEND" >: DEFAULT
|	< TEXT : ~[] >
}

ASTEvaluate evaluate()           :
{/*@bgen(jjtree) Evaluate */
  ASTEvaluate jjtn000 = new ASTEvaluate(JJTEVALUATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Evaluate */
        try {
/*@egen*/
	[ compound_statement_body() ";" ] expression() ( <EOT> | <EOF> )/*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                           jjtreeCloseNodeScope(jjtn000);
                                                                         }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTCode code()       :
{/*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Code */
        try {
/*@egen*/
	statement() ( statement() )* ( <EOT> | <EOF> )/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                         jjtreeCloseNodeScope(jjtn000);
                                                       }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTStatement statement()            :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	statement_body() ";"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void op_before_returns() :
{}
{
	<OPERATOR> identifier() "(" [ identifier() type_ref() ( "," identifier() type_ref() )* ] ")"
}

void op_after_returns() :
{}
{
		 	op_updates() op_synonym() op_version() ";" op_body() <END> <OPERATOR>
	  | 	identifier() <FOREIGN> ( <TEXT> )* <ENDFOREIGN> <OPERATOR>
}

ASTGetOperatorReturnType getoperatorreturntype()                           :
{/*@bgen(jjtree) #GetOperatorReturnType( 3) */
  ASTGetOperatorReturnType jjtn000 = new ASTGetOperatorReturnType(JJTGETOPERATORRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #GetOperatorReturnType( 3) */
        try {
/*@egen*/
	op_before_returns() op_returns() op_after_returns()/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000,  3);
                                                              jjtc000 = false;
                                                              jjtreeCloseNodeScope(jjtn000);
                                                            }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTGetHeading getheading()             :
{/*@bgen(jjtree) GetHeading */
  ASTGetHeading jjtn000 = new ASTGetHeading(JJTGETHEADING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GetHeading */
        try {
/*@egen*/
	heading()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtreeCloseNodeScope(jjtn000);
                  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTGetSignature getsignature()               :
{/*@bgen(jjtree) GetSignature */
  ASTGetSignature jjtn000 = new ASTGetSignature(JJTGETSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GetSignature */
        try {
/*@egen*/
	op_signature() op_returns()/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      jjtreeCloseNodeScope(jjtn000);
                                    }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void statement_body() :
{}
{		LOOKAHEAD(2) assignment() | loop()
	|	op_def()
	|	type_def()
	|	drop()
	|	var_def()
	|	db_constraint_def()
	|	relation_array_load()
	|	LOOKAHEAD(2) begin_transaction() | compound_statement_body()
	|	commit()
	|	rollback()
	|	call()
	|	return_statement()
	|	case_statement()
	|	if_statement()
	|	leave()
	|	write()
	|	writeln()
	|	output()
	|	announce()
	|	execute()
	|   set()
}

/* Rel extension - non-TTM */
void write()        :
{/*@bgen(jjtree) Write */
  ASTWrite jjtn000 = new ASTWrite(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Write */
        try {
/*@egen*/
	<WRITE> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Rel extension - non-TTM */
void writeln()          :
{/*@bgen(jjtree) Writeln */
  ASTWriteln jjtn000 = new ASTWriteln(JJTWRITELN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Writeln */
        try {
/*@egen*/
	<WRITELN> [ expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Rel extension - non-TTM */
void output()         :
{/*@bgen(jjtree) Output */
  ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Output */
        try {
/*@egen*/
	<OUTPUT> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Rel extension - non-TTM */
void announce()           :
{/*@bgen(jjtree) Announce */
  ASTAnnounce jjtn000 = new ASTAnnounce(JJTANNOUNCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Announce */
        try {
/*@egen*/
	<ANNOUNCE> string_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Rel extension - non-TTM */ 
void execute()          :
{/*@bgen(jjtree) Execute */
  ASTExecute jjtn000 = new ASTExecute(JJTEXECUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Execute */
        try {
/*@egen*/
	<EXECUTE> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Rel extension - non-TTM */
void set()      :
{/*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Set */
        try {
/*@egen*/
	<SET> identifier() identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void compound_statement_body() :
{}
{
	<BEGIN> ";"
		( statement() )*
	<END>
}

void op_def() :
{}
{
	<OPERATOR> identifier() "(" parameter_def_commalist() ")" op_returns() ( rel_op_def() | external_op_def() )
}

void lambda() :
{}
{
    <OPERATOR> lambda_definition() <END> <OPERATOR>
  | <LAMBDA> lambda_definition() <LAMBDAEND>}

void lambda_definition()         :
{/*@bgen(jjtree) Lambda */
  ASTLambda jjtn000 = new ASTLambda(JJTLAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lambda */
   try {
/*@egen*/
   "(" parameter_def_commalist() ")" <RETURNS> type_ref() ";" op_body()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/}

void external_op_def()                   :
{/*@bgen(jjtree) #ExternalOpDef( 4) */
 ASTExternalOpDef jjtn000 = new ASTExternalOpDef(JJTEXTERNALOPDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t; StringBuffer s = new StringBuffer();}
{/*@bgen(jjtree) #ExternalOpDef( 4) */
        try {
/*@egen*/
	identifier() <FOREIGN> ( t = <TEXT> {s.append(t.toString());} )* {jjtn000.tokenValue = s.toString();} <ENDFOREIGN> <OPERATOR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  4);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void rel_op_def()               :
{/*@bgen(jjtree) #UserOpDef( 7) */
  ASTUserOpDef jjtn000 = new ASTUserOpDef(JJTUSEROPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UserOpDef( 7) */
        try {
/*@egen*/
 	op_updates() op_synonym() op_version() ";"
	op_body()
	<END> <OPERATOR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  7);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Note: op_returns() and op_updates()
should be mutually exclusive. */
void op_returns()                :
{/*@bgen(jjtree) UserOpReturns */
  ASTUserOpReturns jjtn000 = new ASTUserOpReturns(JJTUSEROPRETURNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserOpReturns */
        try {
/*@egen*/
	[ <RETURNS> type_ref() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void op_updates()                :
{/*@bgen(jjtree) UserOpUpdates */
  ASTUserOpUpdates jjtn000 = new ASTUserOpUpdates(JJTUSEROPUPDATES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserOpUpdates */
        try {
/*@egen*/
	[ <UPDATES> "{" [ <ALL> <BUT> parameter_name_commalist() ] "}" ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void op_synonym()                :
{/*@bgen(jjtree) UserOpSynonym */
  ASTUserOpSynonym jjtn000 = new ASTUserOpSynonym(JJTUSEROPSYNONYM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserOpSynonym */
        try {
/*@egen*/
	[ synonym_def() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void op_version()                :
{/*@bgen(jjtree) UserOpVersion */
  ASTUserOpVersion jjtn000 = new ASTUserOpVersion(JJTUSEROPVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserOpVersion */
        try {
/*@egen*/
	[ <VERSION> identifier() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void op_body()             :
{/*@bgen(jjtree) UserOpBody */
  ASTUserOpBody jjtn000 = new ASTUserOpBody(JJTUSEROPBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserOpBody */
        try {
/*@egen*/
	[ statement() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void return_statement()                   :
{/*@bgen(jjtree) ReturnExpression */
  ASTReturnExpression jjtn000 = new ASTReturnExpression(JJTRETURNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnExpression */
        try {
/*@egen*/
	<RETURN> [ expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}	

/* Not explicitly defined in TTM3 */
void parameter_def_commalist()                   :
{/*@bgen(jjtree) UserOpParameters */
  ASTUserOpParameters jjtn000 = new ASTUserOpParameters(JJTUSEROPPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserOpParameters */
        try {
/*@egen*/
	[ parameter_def() ( "," parameter_def() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void parameter_def()          :
{/*@bgen(jjtree) ParmDef */
  ASTParmDef jjtn000 = new ASTParmDef(JJTPARMDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParmDef */
        try {
/*@egen*/
	identifier() type_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Not explicitly defined in TTM3 */
void parameter_name_commalist() :
{}
{
	[ identifier() ( "," identifier() )* ]
}

void synonym_def() :
{}
{
	<SYNONYMS> "{" user_op_name_commalist() "}"
}

/* Not explicitly defined in TTM3 */
void user_op_name_commalist() :
{}
{
	identifier() ( "," identifier() )*
}

/* Inclusion of type_ref_commalist() in
OPERATOR DROP is not per TTM3,
but necessary to 
disambiguate operators. */
void drop() :
{}
{
	<DROP> 
	(
			<OPERATOR>/*@bgen(jjtree) DropOperator */
                                   {
                                     ASTDropOperator jjtn001 = new ASTDropOperator(JJTDROPOPERATOR);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtreeOpenNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ op_signature()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtreeCloseNodeScope(jjtn001);
                                     }
                                   }
/*@egen*/									             
		|	<VAR>/*@bgen(jjtree) #DropRelvar( 1) */
                              {
                                ASTDropRelvar jjtn002 = new ASTDropRelvar(JJTDROPRELVAR);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                                jjtreeOpenNodeScope(jjtn002);
                              }
                              try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
                              } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte002;
                                }
                                if (jjte002 instanceof ParseException) {
                                  throw (ParseException)jjte002;
                                }
                                throw (Error)jjte002;
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  1);
                                  jjtreeCloseNodeScope(jjtn002);
                                }
                              }
/*@egen*/											              
		|	<CONSTRAINT>/*@bgen(jjtree) #DropConstraint( 1) */
                                     {
                                       ASTDropConstraint jjtn003 = new ASTDropConstraint(JJTDROPCONSTRAINT);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                       jjtreeOpenNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte003) {
                                       if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte003;
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         throw (ParseException)jjte003;
                                       }
                                       throw (Error)jjte003;
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  1);
                                         jjtreeCloseNodeScope(jjtn003);
                                       }
                                     }
/*@egen*/									                  
		|	<TYPE>/*@bgen(jjtree) #DropType( 1) */
                               {
                                 ASTDropType jjtn004 = new ASTDropType(JJTDROPTYPE);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                                 jjtreeOpenNodeScope(jjtn004);
                               }
                               try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
                               } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte004;
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   throw (ParseException)jjte004;
                                 }
                                 throw (Error)jjte004;
                               } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  1);
                                   jjtreeCloseNodeScope(jjtn004);
                                 }
                               }
/*@egen*/											            
	)
}

void op_signature()              :
{/*@bgen(jjtree) OpSignature */
  ASTOpSignature jjtn000 = new ASTOpSignature(JJTOPSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpSignature */
        try {
/*@egen*/
	identifier() "(" type_ref_commalist() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void op_type()         :
{/*@bgen(jjtree) OpType */
  ASTOpType jjtn000 = new ASTOpType(JJTOPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OpType */
        try {
/*@egen*/	<OPERATOR> "(" type_ref_commalist() ")" [ <RETURNS> type_ref() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void type_ref_commalist()                   :
{/*@bgen(jjtree) TypeRefCommalist */
  ASTTypeRefCommalist jjtn000 = new ASTTypeRefCommalist(JJTTYPEREFCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeRefCommalist */
        try {
/*@egen*/
	[ type_ref() ( "," type_ref() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Was user_scalar_type_def */
void type_def()          :
{/*@bgen(jjtree) TypeDef */
  ASTTypeDef jjtn000 = new ASTTypeDef(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDef */
        try {
/*@egen*/
	<TYPE> identifier() type_def_kind()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void type_def_kind() :
{}
{
	 	LOOKAHEAD(type_def_external()) 	type_def_external()
	|									type_def_internal() 
}

void type_def_external()                  :
{/*@bgen(jjtree) TypeDefExternal */
 ASTTypeDefExternal jjtn000 = new ASTTypeDefExternal(JJTTYPEDEFEXTERNAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t; StringBuffer s = new StringBuffer();}
{/*@bgen(jjtree) TypeDefExternal */
        try {
/*@egen*/
	identifier() <FOREIGN> ( t = <TEXT> {s.append(t.toString());} )* {jjtn000.tokenValue = s.toString();} <ENDFOREIGN> <TYPE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* User-defined (internal) types start here */

void type_def_internal()                  :
{/*@bgen(jjtree) TypeDefInternal */
  ASTTypeDefInternal jjtn000 = new ASTTypeDefInternal(JJTTYPEDEFINTERNAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDefInternal */
        try {
/*@egen*/
	type_def_internal_ordinal() type_def_internal_union() type_def_internal_is_or_possrep()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void type_def_internal_is_or_possrep() :
{}
{
       is_def() 
	|  possrep_def_list()
}

void type_def_internal_ordinal() :
{}
{
	[ type_def_internal_opt_ordinal() ]
}

void type_def_internal_opt_ordinal() :
{}
{
	(/*@bgen(jjtree) TypeDefInternalOptOrdinal */
          {
            ASTTypeDefInternalOptOrdinal jjtn001 = new ASTTypeDefInternalOptOrdinal(JJTTYPEDEFINTERNALOPTORDINAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/
	  <ORDINAL>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/                            
	|/*@bgen(jjtree) TypeDefInternalOptOrdered */
          {
            ASTTypeDefInternalOptOrdered jjtn002 = new ASTTypeDefInternalOptOrdered(JJTTYPEDEFINTERNALOPTORDERED);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ <ORDERED>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/                           
	)
}

void type_def_internal_union() :
{}
{
	[ type_def_internal_opt_union() ]
}

void type_def_internal_opt_union()                          :
{/*@bgen(jjtree) TypeDefInternalOptUnion */
  ASTTypeDefInternalOptUnion jjtn000 = new ASTTypeDefInternalOptUnion(JJTTYPEDEFINTERNALOPTUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDefInternalOptUnion */
        try {
/*@egen*/
	<UNION>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void is_def() :
{}
{
	<IS> "{"
	(
		LOOKAHEAD(2) single_inheritance_is_def() | multiple_inheritance_is_def()
	)
	"}"
}

void single_inheritance_is_def()                         :
{/*@bgen(jjtree) SingleInheritanceIsDef */
  ASTSingleInheritanceIsDef jjtn000 = new ASTSingleInheritanceIsDef(JJTSINGLEINHERITANCEISDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleInheritanceIsDef */
        try {
/*@egen*/
	identifier() possrep_or_specialization_details()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void possrep_or_specialization_details() :
{}
{
		specialisation_constraint_def() [ derived_possrep_def_list() ]
	|	possrep_def_list()
}

void multiple_inheritance_is_def()                           :
{/*@bgen(jjtree) MultipleInheritanceIsDef */
  ASTMultipleInheritanceIsDef jjtn000 = new ASTMultipleInheritanceIsDef(JJTMULTIPLEINHERITANCEISDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultipleInheritanceIsDef */
        try {
/*@egen*/
	scalar_type_name_commalist() derived_possrep_def_list()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Not explicitly defined in TTM3 */
void scalar_type_name_commalist() :
{}
{
	scalar_type_name() ( "," scalar_type_name() )* 
}

void scalar_type_name()                 :
{/*@bgen(jjtree) ScalarTypeName */
  ASTScalarTypeName jjtn000 = new ASTScalarTypeName(JJTSCALARTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScalarTypeName */
        try {
/*@egen*/
	identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Not explicitly defined in TTM3 */
void possrep_def_list() :
{}
{
	( possrep_def() )* possrep_opt_initialiser()
}

/* Not defined in TTM3.  For explicitly setting
values of components not in the current possrep.  
Only required by types with multiple possreps.
Takes the place of "highly protected
operators not part of D". (pg 382, etc.) */
void possrep_opt_initialiser()                     :
{/*@bgen(jjtree) PossrepInitialiser */
  ASTPossrepInitialiser jjtn000 = new ASTPossrepInitialiser(JJTPOSSREPINITIALISER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepInitialiser */
        try {
/*@egen*/
	[ <INIT> possrep_initialiser_assignments() ( possrep_initialiser_assignments() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Not defined in TTM3, as per above.
Identifier should be existing POSSREP name. */
void possrep_initialiser_assignments()                                :
{/*@bgen(jjtree) PossrepInitialiserAssignments */
  ASTPossrepInitialiserAssignments jjtn000 = new ASTPossrepInitialiserAssignments(JJTPOSSREPINITIALISERASSIGNMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepInitialiserAssignments */
        try {
/*@egen*/
	identifier() "(" assignment() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void possrep_def()             :
{/*@bgen(jjtree) PossrepDef */
  ASTPossrepDef jjtn000 = new ASTPossrepDef(JJTPOSSREPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepDef */
        try {
/*@egen*/
	<POSSREP> possrep_def_identifier() "{" possrep_component_def_commalist() possrep_opt_constraint_def() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void possrep_def_identifier()                       :
{/*@bgen(jjtree) PossrepDefIdentifier */
  ASTPossrepDefIdentifier jjtn000 = new ASTPossrepDefIdentifier(JJTPOSSREPDEFIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepDefIdentifier */
        try {
/*@egen*/
	[ identifier() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void possrep_opt_constraint_def()                          :
{/*@bgen(jjtree) PossrepDefConstraintDef */
  ASTPossrepDefConstraintDef jjtn000 = new ASTPossrepDefConstraintDef(JJTPOSSREPDEFCONSTRAINTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepDefConstraintDef */
        try {
/*@egen*/
	[ constraint_def() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Not explicitly defined in TTM3 */
void possrep_component_def_commalist()                               :
{/*@bgen(jjtree) PossrepDefComponentCommalist */
  ASTPossrepDefComponentCommalist jjtn000 = new ASTPossrepDefComponentCommalist(JJTPOSSREPDEFCOMPONENTCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepDefComponentCommalist */
        try {
/*@egen*/
	[ possrep_component_def() ( "," possrep_component_def() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void possrep_component_def()                     :
{/*@bgen(jjtree) PossrepDefComponent */
  ASTPossrepDefComponent jjtn000 = new ASTPossrepDefComponent(JJTPOSSREPDEFCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepDefComponent */
        try {
/*@egen*/
	identifier() type_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Expression must be boolean */
void constraint_def()                       :
{/*@bgen(jjtree) PossrepConstraintDef */
  ASTPossrepConstraintDef jjtn000 = new ASTPossrepConstraintDef(JJTPOSSREPCONSTRAINTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PossrepConstraintDef */
        try {
/*@egen*/
	<CONSTRAINT> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Expression must be boolean */ 
void specialisation_constraint_def()                              :
{/*@bgen(jjtree) SpecialisationConstraintDef */
  ASTSpecialisationConstraintDef jjtn000 = new ASTSpecialisationConstraintDef(JJTSPECIALISATIONCONSTRAINTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SpecialisationConstraintDef */
        try {
/*@egen*/
	<CONSTRAINT> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Not explicitly defined in TTM3 */
void derived_possrep_def_list() :
{}
{
	derived_possrep_def() ( derived_possrep_def() )*
}

void derived_possrep_def()                    :
{/*@bgen(jjtree) DerivedPossrepDef */
  ASTDerivedPossrepDef jjtn000 = new ASTDerivedPossrepDef(JJTDERIVEDPOSSREPDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DerivedPossrepDef */
        try {
/*@egen*/
	<POSSREP> derived_possrep_def_opt_identifier() "{" derived_possrep_component_def_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void derived_possrep_def_opt_identifier()                                 :
{/*@bgen(jjtree) DerivedPossrepDefOptIdentifier */
  ASTDerivedPossrepDefOptIdentifier jjtn000 = new ASTDerivedPossrepDefOptIdentifier(JJTDERIVEDPOSSREPDEFOPTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DerivedPossrepDefOptIdentifier */
        try {
/*@egen*/
	[ identifier() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/	
}

/* Not explicitly defined in TTM3 */
void derived_possrep_component_def_commalist() :
{}
{
	derived_possrep_component_def() ( "," derived_possrep_component_def() )*
}

void derived_possrep_component_def()                             :
{/*@bgen(jjtree) DerivedPossrepComponentDef */
  ASTDerivedPossrepComponentDef jjtn000 = new ASTDerivedPossrepComponentDef(JJTDERIVEDPOSSREPCOMPONENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DerivedPossrepComponentDef */
        try {
/*@egen*/
	identifier() "=" identifier() "(" identifier() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* End user-defined types (internal) */

/* Includes scalar_var_def,
relation_var_def,
array_var_def and
tuple_var_def */
void var_def()         :
{/*@bgen(jjtree) VarDef */
  ASTVarDef jjtn000 = new ASTVarDef(JJTVARDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDef */
        try {
/*@egen*/
	<VAR> identifier() 
	(
			var_scalar_or_tuple()
		|	var_array()
		|	var_relvar()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_relvar() :
{}
{
		( <REAL> | <BASE> ) var_type_or_init_value()/*@bgen(jjtree) #VarRelvarReal( 2) */
                                                             {
                                                               ASTVarRelvarReal jjtn001 = new ASTVarRelvarReal(JJTVARRELVARREAL);
                                                               boolean jjtc001 = true;
                                                               jjtree.openNodeScope(jjtn001);
                                                               jjtreeOpenNodeScope(jjtn001);
                                                             }
                                                             try {
/*@egen*/ var_keydeflist()/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte001) {
                                                               if (jjtc001) {
                                                                 jjtree.clearNodeScope(jjtn001);
                                                                 jjtc001 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte001 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte001;
                                                               }
                                                               if (jjte001 instanceof ParseException) {
                                                                 throw (ParseException)jjte001;
                                                               }
                                                               throw (Error)jjte001;
                                                             } finally {
                                                               if (jjtc001) {
                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                 jjtreeCloseNodeScope(jjtn001);
                                                               }
                                                             }
/*@egen*/		                 
	|	<PRIVATE>			var_type_or_init_value()/*@bgen(jjtree) #VarRelvarPrivate( 2) */
                                                                         {
                                                                           ASTVarRelvarPrivate jjtn002 = new ASTVarRelvarPrivate(JJTVARRELVARPRIVATE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
                                                                           jjtreeOpenNodeScope(jjtn002);
                                                                         }
                                                                         try {
/*@egen*/ var_keydeflist()/*@bgen(jjtree)*/
                                                                         } catch (Throwable jjte002) {
                                                                           if (jjtc002) {
                                                                             jjtree.clearNodeScope(jjtn002);
                                                                             jjtc002 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte002 instanceof RuntimeException) {
                                                                             throw (RuntimeException)jjte002;
                                                                           }
                                                                           if (jjte002 instanceof ParseException) {
                                                                             throw (ParseException)jjte002;
                                                                           }
                                                                           throw (Error)jjte002;
                                                                         } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                             jjtreeCloseNodeScope(jjtn002);
                                                                           }
                                                                         }
/*@egen*/		                    
	|	<PUBLIC>			type_ref()/*@bgen(jjtree) #VarRelvarPublic( 2) */
                                                           {
                                                             ASTVarRelvarPublic jjtn003 = new ASTVarRelvarPublic(JJTVARRELVARPUBLIC);
                                                             boolean jjtc003 = true;
                                                             jjtree.openNodeScope(jjtn003);
                                                             jjtreeOpenNodeScope(jjtn003);
                                                           }
                                                           try {
/*@egen*/ var_keydeflist()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte003) {
                                                             if (jjtc003) {
                                                               jjtree.clearNodeScope(jjtn003);
                                                               jjtc003 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte003 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte003;
                                                             }
                                                             if (jjte003 instanceof ParseException) {
                                                               throw (ParseException)jjte003;
                                                             }
                                                             throw (Error)jjte003;
                                                           } finally {
                                                             if (jjtc003) {
                                                               jjtree.closeNodeScope(jjtn003,  2);
                                                               jjtreeCloseNodeScope(jjtn003);
                                                             }
                                                           }
/*@egen*/						                   
	|	<VIRTUAL>			expression()/*@bgen(jjtree) #VarRelvarVirtual( 2) */
                                                             {
                                                               ASTVarRelvarVirtual jjtn004 = new ASTVarRelvarVirtual(JJTVARRELVARVIRTUAL);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                               jjtreeOpenNodeScope(jjtn004);
                                                             }
                                                             try {
/*@egen*/ var_keydeflistoptional()/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte004) {
                                                               if (jjtc004) {
                                                                 jjtree.clearNodeScope(jjtn004);
                                                                 jjtc004 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte004 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte004;
                                                               }
                                                               if (jjte004 instanceof ParseException) {
                                                                 throw (ParseException)jjte004;
                                                               }
                                                               throw (Error)jjte004;
                                                             } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                 jjtreeCloseNodeScope(jjtn004);
                                                               }
                                                             }
/*@egen*/			                    
	| 	var_relvar_external()
}

void var_relvar_external() 	                   :
{/*@bgen(jjtree) VarRelvarExternal */
  ASTVarRelvarExternal jjtn000 = new ASTVarRelvarExternal(JJTVARRELVAREXTERNAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VarRelvarExternal */
                try {
/*@egen*/		<EXTERNAL>	identifier() string_literal() [ identifier() ]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void var_keydeflist()             :
{/*@bgen(jjtree) KeyDefList */
  ASTKeyDefList jjtn000 = new ASTKeyDefList(JJTKEYDEFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KeyDefList */
        try {
/*@egen*/
	var_keydef() ( var_keydef() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_keydeflistoptional()             :
{/*@bgen(jjtree) KeyDefList */
  ASTKeyDefList jjtn000 = new ASTKeyDefList(JJTKEYDEFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KeyDefList */
        try {
/*@egen*/
	( var_keydef() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_keydef()         :
{/*@bgen(jjtree) KeyDef */
  ASTKeyDef jjtn000 = new ASTKeyDef(JJTKEYDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KeyDef */
        try {
/*@egen*/
	<KEY> "{" attribute_name_list() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_scalar_or_tuple()                   : 
{/*@bgen(jjtree) VarScalarOrTuple */
  ASTVarScalarOrTuple jjtn000 = new ASTVarScalarOrTuple(JJTVARSCALARORTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarScalarOrTuple */
        try {
/*@egen*/
	var_type_or_init_value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_type_or_init_value() :
{}
{
		var_type_and_optional_init()
	|	var_init()
}

void var_type_and_optional_init()                         :
{/*@bgen(jjtree) VarTypeAndOptionalInit */
  ASTVarTypeAndOptionalInit jjtn000 = new ASTVarTypeAndOptionalInit(JJTVARTYPEANDOPTIONALINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarTypeAndOptionalInit */
        try {
/*@egen*/
	type_ref() [ <INIT> "(" expression() ")" ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_init()          :
{/*@bgen(jjtree) VarInit */
  ASTVarInit jjtn000 = new ASTVarInit(JJTVARINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarInit */
        try {
/*@egen*/
	<INIT> "(" expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void var_array()           :
{/*@bgen(jjtree) VarArray */
  ASTVarArray jjtn000 = new ASTVarArray(JJTVARARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarArray */
        try {
/*@egen*/
	<ARRAY> type_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void db_constraint_def()                     :
{/*@bgen(jjtree) DatabaseConstraint */
  ASTDatabaseConstraint jjtn000 = new ASTDatabaseConstraint(JJTDATABASECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DatabaseConstraint */
        try {
/*@egen*/
	<CONSTRAINT> identifier() expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* type -- scalar_type, tuple_type, relation_type */
void type_ref() :
{}
{/*@bgen(jjtree) Type */
                {
                  ASTType jjtn001 = new ASTType(JJTTYPE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		identifier()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/							     
	|	type_same_type_as()
	|	tuple_type()
	|	relation_type()
	| 	op_type()
}

void type_same_type_as()                 :
{/*@bgen(jjtree) TypeSameTypeAs */
  ASTTypeSameTypeAs jjtn000 = new ASTTypeSameTypeAs(JJTTYPESAMETYPEAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeSameTypeAs */
        try {
/*@egen*/
	<SAME_TYPE_AS> "(" expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void tuple_type()            :
{/*@bgen(jjtree) TypeTuple */
  ASTTypeTuple jjtn000 = new ASTTypeTuple(JJTTYPETUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeTuple */
        try {
/*@egen*/
	<TUPLE> heading_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void relation_type()               :
{/*@bgen(jjtree) TypeRelation */
  ASTTypeRelation jjtn000 = new ASTTypeRelation(JJTTYPERELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeRelation */
        try {
/*@egen*/
	<RELATION> heading_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void heading_type() :
{}
{
		heading()
	|	same_heading_as()
}

void same_heading_as()                :
{/*@bgen(jjtree) SameHeadingAs */
  ASTSameHeadingAs jjtn000 = new ASTSameHeadingAs(JJTSAMEHEADINGAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SameHeadingAs */
        try {
/*@egen*/
	<SAME_HEADING_AS> "(" expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void relation_array_load()                    :
{/*@bgen(jjtree) RelationArrayLoad */
  ASTRelationArrayLoad jjtn000 = new ASTRelationArrayLoad(JJTRELATIONARRAYLOAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationArrayLoad */
        try {
/*@egen*/
	<LOAD> identifier() <FROM> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void begin_transaction()                   :
{/*@bgen(jjtree) TransactionBegin */
  ASTTransactionBegin jjtn000 = new ASTTransactionBegin(JJTTRANSACTIONBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TransactionBegin */
        try {
/*@egen*/
	<BEGIN> <TRANSACTION>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void commit()                    :
{/*@bgen(jjtree) TransactionCommit */
  ASTTransactionCommit jjtn000 = new ASTTransactionCommit(JJTTRANSACTIONCOMMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TransactionCommit */
        try {
/*@egen*/
	<COMMIT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void rollback()                      :
{/*@bgen(jjtree) TransactionRollback */
  ASTTransactionRollback jjtn000 = new ASTTransactionRollback(JJTTRANSACTIONROLLBACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TransactionRollback */
        try {
/*@egen*/
	<ROLLBACK>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void case_statement()                :
{/*@bgen(jjtree) CaseStatement */
  ASTCaseStatement jjtn000 = new ASTCaseStatement(JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseStatement */
        try {
/*@egen*/
	<CASE> ";" 
	when_def_list() 
	case_else() 
	<END> <CASE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void when_def_list()               :
{/*@bgen(jjtree) CaseWhenList */
  ASTCaseWhenList jjtn000 = new ASTCaseWhenList(JJTCASEWHENLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseWhenList */
        try {
/*@egen*/
	when_def() ( when_def() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void when_def()           :
{/*@bgen(jjtree) CaseWhen */
  ASTCaseWhen jjtn000 = new ASTCaseWhen(JJTCASEWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseWhen */
        try {
/*@egen*/
	<WHEN> expression() <THEN> statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void case_else()           :
{/*@bgen(jjtree) CaseElse */
  ASTCaseElse jjtn000 = new ASTCaseElse(JJTCASEELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseElse */
        try {
/*@egen*/
	[ <ELSE> statement() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Note that THEN and ELSE are not
followed by semicolons, but maybe should be? */
void if_statement()              :
{/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	<IF> expression() <THEN> statement() 
	if_statement_else()
	<END> <IF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void if_statement_else()                :
{/*@bgen(jjtree) ElseStatement */
  ASTElseStatement jjtn000 = new ASTElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseStatement */
        try {
/*@egen*/
	[ <ELSE> statement() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void loop() :
{}
{
	[ identifier() ":" ] ( do_statement() | while_statement() | for_statement() )
}

void do_statement()         :
{/*@bgen(jjtree) DoLoop */
  ASTDoLoop jjtn000 = new ASTDoLoop(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoLoop */
        try {
/*@egen*/
	<DO> identifier() ":=" expression() <TO> expression() ";"
		statement()
	<END> <DO>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void while_statement()            :
{/*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileLoop */
        try {
/*@egen*/
	<WHILE> expression() ";"
		statement()
	<END> <WHILE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void for_statement()          :
{/*@bgen(jjtree) ForLoop */
  ASTForLoop jjtn000 = new ASTForLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForLoop */
        try {
/*@egen*/
	<FOR> expression() ";"
		statement()
	<END> <FOR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void leave() :
{}
{
	<LEAVE> identifier()
}

void call()       :
{/*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	<CALL> identifier() "(" arglist() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void assignment()             :
{/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
	assign() ( "," assign() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void assign() :
{}
{
		identifier() ":="/*@bgen(jjtree) #Assign( 2) */
                                  {
                                    ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
/*@egen*/ 									          
	|	<INSERT> identifier()/*@bgen(jjtree) #Insert( 2) */
                                      {
                                        ASTInsert jjtn002 = new ASTInsert(JJTINSERT);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                        jjtreeOpenNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte002;
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          throw (ParseException)jjte002;
                                        }
                                        throw (Error)jjte002;
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
                                      }
/*@egen*/								          
	| 	<D_INSERT> identifier()/*@bgen(jjtree) #DInsert( 2) */
                                        {
                                          ASTDInsert jjtn003 = new ASTDInsert(JJTDINSERT);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                          jjtreeOpenNodeScope(jjtn003);
                                        }
                                        try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte003) {
                                          if (jjtc003) {
                                            jjtree.clearNodeScope(jjtn003);
                                            jjtc003 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte003 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte003;
                                          }
                                          if (jjte003 instanceof ParseException) {
                                            throw (ParseException)jjte003;
                                          }
                                          throw (Error)jjte003;
                                        } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  2);
                                            jjtreeCloseNodeScope(jjtn003);
                                          }
                                        }
/*@egen*/							           
	|	<DELETE> identifier()/*@bgen(jjtree) #Delete( 2) */
                                      {
                                        ASTDelete jjtn004 = new ASTDelete(JJTDELETE);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
                                        jjtreeOpenNodeScope(jjtn004);
                                      }
                                      try {
/*@egen*/ delete_parameter()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte004;
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          throw (ParseException)jjte004;
                                        }
                                        throw (Error)jjte004;
                                      } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                          jjtreeCloseNodeScope(jjtn004);
                                        }
                                      }
/*@egen*/						          
	|	<I_DELETE> identifier()/*@bgen(jjtree) #IDelete( 2) */
                                        {
                                          ASTIDelete jjtn005 = new ASTIDelete(JJTIDELETE);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
                                          jjtreeOpenNodeScope(jjtn005);
                                        }
                                        try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte005) {
                                          if (jjtc005) {
                                            jjtree.clearNodeScope(jjtn005);
                                            jjtc005 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte005 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte005;
                                          }
                                          if (jjte005 instanceof ParseException) {
                                            throw (ParseException)jjte005;
                                          }
                                          throw (Error)jjte005;
                                        } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  2);
                                            jjtreeCloseNodeScope(jjtn005);
                                          }
                                        }
/*@egen*/							           
	|	<UPDATE> identifier() update_where() ":"/*@bgen(jjtree) #UpdateStatement( 3) */
                                                         {
                                                           ASTUpdateStatement jjtn006 = new ASTUpdateStatement(JJTUPDATESTATEMENT);
                                                           boolean jjtc006 = true;
                                                           jjtree.openNodeScope(jjtn006);
                                                           jjtreeOpenNodeScope(jjtn006);
                                                         }
                                                         try {
/*@egen*/ update_assignment()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte006) {
                                                           if (jjtc006) {
                                                             jjtree.clearNodeScope(jjtn006);
                                                             jjtc006 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte006 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte006;
                                                           }
                                                           if (jjte006 instanceof ParseException) {
                                                             throw (ParseException)jjte006;
                                                           }
                                                           throw (Error)jjte006;
                                                         } finally {
                                                           if (jjtc006) {
                                                             jjtree.closeNodeScope(jjtn006,  3);
                                                             jjtreeCloseNodeScope(jjtn006);
                                                           }
                                                         }
/*@egen*/	                   
}

void delete_parameter()                  :{/*@bgen(jjtree) DeleteParameter */
  ASTDeleteParameter jjtn000 = new ASTDeleteParameter(JJTDELETEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeleteParameter */
        try {
/*@egen*/	[ [/*@bgen(jjtree) DeleteWhere */
            {
              ASTDeleteWhere jjtn001 = new ASTDeleteWhere(JJTDELETEWHERE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ <WHERE>/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
              }
            }
/*@egen*/              ] expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void update_where()              :
{/*@bgen(jjtree) UpdateWhere */
  ASTUpdateWhere jjtn000 = new ASTUpdateWhere(JJTUPDATEWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UpdateWhere */
        try {
/*@egen*/
	[ <WHERE> expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void update_assignment()                   :
{/*@bgen(jjtree) UpdateAssignment */
  ASTUpdateAssignment jjtn000 = new ASTUpdateAssignment(JJTUPDATEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UpdateAssignment */
        try {
/*@egen*/
	"{" assignment() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Expressions */

void expression()             :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
                try {
/*@egen*/
		LOOKAHEAD(2) attribute_from() 
	| 	LOOKAHEAD(2) basic_expression() 
	|	tuple_from()
	|	with()
	|	tclose()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void attribute_from()                :
{/*@bgen(jjtree) AttributeFrom */
  ASTAttributeFrom jjtn000 = new ASTAttributeFrom(JJTATTRIBUTEFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeFrom */
        try {
/*@egen*/
	identifier() <FROM> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void tuple_from()            :
{/*@bgen(jjtree) TupleFrom */
  ASTTupleFrom jjtn000 = new ASTTupleFrom(JJTTUPLEFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TupleFrom */
        try {
/*@egen*/
	<TUPLE> <FROM> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void with()       :
{/*@bgen(jjtree) With */
  ASTWith jjtn000 = new ASTWith(JJTWITH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) With */
        try {
/*@egen*/
	<WITH> "(" name_intro_commalist() ")" ":" expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void name_intro_commalist()                         :
{/*@bgen(jjtree) WithNameIntroCommalist */
  ASTWithNameIntroCommalist jjtn000 = new ASTWithNameIntroCommalist(JJTWITHNAMEINTROCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithNameIntroCommalist */
        try {
/*@egen*/
	name_intro() ( "," name_intro() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void name_intro() :
{}
{
	identifier() ":="/*@bgen(jjtree) #WithNameIntro( 2) */
                          {
                            ASTWithNameIntro jjtn001 = new ASTWithNameIntro(JJTWITHNAMEINTRO);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtreeCloseNodeScope(jjtn001);
                            }
                          }
/*@egen*/ 				                 
}

void tclose()         :
{/*@bgen(jjtree) TClose */
  ASTTClose jjtn000 = new ASTTClose(JJTTCLOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TClose */
        try {
/*@egen*/
	<TCLOSE> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void basic_expression() :
{}
{
	order_expression()
	[
						"[" expression()/*@bgen(jjtree) #ArrayDereference( 2) */
                                                                 {
                                                                   ASTArrayDereference jjtn001 = new ASTArrayDereference(JJTARRAYDEREFERENCE);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                   jjtreeOpenNodeScope(jjtn001);
                                                                 }
                                                                 try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                     jjtreeCloseNodeScope(jjtn001);
                                                                   }
                                                                 }
/*@egen*/	                    
		| 				"(" arglist()/*@bgen(jjtree) #FnInvokeAnonymous( 2) */
                                                              {
                                                                ASTFnInvokeAnonymous jjtn002 = new ASTFnInvokeAnonymous(JJTFNINVOKEANONYMOUS);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                                jjtreeOpenNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                  jjtreeCloseNodeScope(jjtn002);
                                                                }
                                                              }
/*@egen*/		                     
	]
}

void order_expression() :
{}
{
	where_expression() [ <ORDER> "(" order_item_commalist()/*@bgen(jjtree) #AlgOrder( 2) */
                                                                {
                                                                  ASTAlgOrder jjtn001 = new ASTAlgOrder(JJTALGORDER);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
                                                                  jjtreeOpenNodeScope(jjtn001);
                                                                }
                                                                try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                                    jjtreeCloseNodeScope(jjtn001);
                                                                  }
                                                                }
/*@egen*/                ]		
}

void where_expression() :
{}
{
	or_expression() [ <WHERE>/*@bgen(jjtree) #AlgWhere( 2) */
                                  {
                                    ASTAlgWhere jjtn001 = new ASTAlgWhere(JJTALGWHERE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ or_expression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
/*@egen*/              ]
}

void or_expression() : 
{} 
{ 
	xor_expression() ( <OR>/*@bgen(jjtree) #Or( 2) */
                                {
                                  ASTOr jjtn001 = new ASTOr(JJTOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ xor_expression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/        )* 
}

void xor_expression() :
{}
{
	and_expression() ( <XOR>/*@bgen(jjtree) #Xor( 2) */
                                 {
                                   ASTXor jjtn001 = new ASTXor(JJTXOR);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtreeOpenNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ and_expression()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
/*@egen*/         )* 
}

void and_expression() : 
{} 
{ 
	compare_expression() ( <AND>/*@bgen(jjtree) #And( 2) */
                                     {
                                       ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ compare_expression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
                                     }
/*@egen*/         )*
}

void compare_expression() : 
{} 
{ 
	rel_diadic() [
			"="/*@bgen(jjtree) #CompEqual( 2) */
                             {
                               ASTCompEqual jjtn001 = new ASTCompEqual(JJTCOMPEQUAL);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
                             }
                             try {
/*@egen*/  rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtreeCloseNodeScope(jjtn001);
                               }
                             }
/*@egen*/              
		|	"<>"/*@bgen(jjtree) #CompNequal( 2) */
                             {
                               ASTCompNequal jjtn002 = new ASTCompNequal(JJTCOMPNEQUAL);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtreeOpenNodeScope(jjtn002);
                             }
                             try {
/*@egen*/ rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtreeCloseNodeScope(jjtn002);
                               }
                             }
/*@egen*/               
		|	">="/*@bgen(jjtree) #CompGTE( 2) */
                             {
                               ASTCompGTE jjtn003 = new ASTCompGTE(JJTCOMPGTE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                               jjtreeOpenNodeScope(jjtn003);
                             }
                             try {
/*@egen*/ rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte003;
                               }
                               if (jjte003 instanceof ParseException) {
                                 throw (ParseException)jjte003;
                               }
                               throw (Error)jjte003;
                             } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtreeCloseNodeScope(jjtn003);
                               }
                             }
/*@egen*/            
		|	"<="/*@bgen(jjtree) #CompLTE( 2) */
                             {
                               ASTCompLTE jjtn004 = new ASTCompLTE(JJTCOMPLTE);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
                               jjtreeOpenNodeScope(jjtn004);
                             }
                             try {
/*@egen*/ rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte004) {
                               if (jjtc004) {
                                 jjtree.clearNodeScope(jjtn004);
                                 jjtc004 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte004 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte004;
                               }
                               if (jjte004 instanceof ParseException) {
                                 throw (ParseException)jjte004;
                               }
                               throw (Error)jjte004;
                             } finally {
                               if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004,  2);
                                 jjtreeCloseNodeScope(jjtn004);
                               }
                             }
/*@egen*/            
		|	">"/*@bgen(jjtree) #CompGT( 2) */
                             {
                               ASTCompGT jjtn005 = new ASTCompGT(JJTCOMPGT);
                               boolean jjtc005 = true;
                               jjtree.openNodeScope(jjtn005);
                               jjtreeOpenNodeScope(jjtn005);
                             }
                             try {
/*@egen*/  rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte005) {
                               if (jjtc005) {
                                 jjtree.clearNodeScope(jjtn005);
                                 jjtc005 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte005 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte005;
                               }
                               if (jjte005 instanceof ParseException) {
                                 throw (ParseException)jjte005;
                               }
                               throw (Error)jjte005;
                             } finally {
                               if (jjtc005) {
                                 jjtree.closeNodeScope(jjtn005,  2);
                                 jjtreeCloseNodeScope(jjtn005);
                               }
                             }
/*@egen*/           
		|	"<"/*@bgen(jjtree) #CompLT( 2) */
                             {
                               ASTCompLT jjtn006 = new ASTCompLT(JJTCOMPLT);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
                               jjtreeOpenNodeScope(jjtn006);
                             }
                             try {
/*@egen*/  rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte006) {
                               if (jjtc006) {
                                 jjtree.clearNodeScope(jjtn006);
                                 jjtc006 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte006 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte006;
                               }
                               if (jjte006 instanceof ParseException) {
                                 throw (ParseException)jjte006;
                               }
                               throw (Error)jjte006;
                             } finally {
                               if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006,  2);
                                 jjtreeCloseNodeScope(jjtn006);
                               }
                             }
/*@egen*/           
		|	<IN>/*@bgen(jjtree) #TupleIn( 2) */
                             {
                               ASTTupleIn jjtn007 = new ASTTupleIn(JJTTUPLEIN);
                               boolean jjtc007 = true;
                               jjtree.openNodeScope(jjtn007);
                               jjtreeOpenNodeScope(jjtn007);
                             }
                             try {
/*@egen*/ rel_diadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte007) {
                               if (jjtc007) {
                                 jjtree.clearNodeScope(jjtn007);
                                 jjtc007 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte007 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte007;
                               }
                               if (jjte007 instanceof ParseException) {
                                 throw (ParseException)jjte007;
                               }
                               throw (Error)jjte007;
                             } finally {
                               if (jjtc007) {
                                 jjtree.closeNodeScope(jjtn007,  2);
                                 jjtreeCloseNodeScope(jjtn007);
                               }
                             }
/*@egen*/            
	]
}

void rel_diadic() :
{}
{
	rel_monadic() (
			<UNION>/*@bgen(jjtree) #AlgUnion( 2) */
                                {
                                  ASTAlgUnion jjtn001 = new ASTAlgUnion(JJTALGUNION);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/ 								             
		|   <XUNION>/*@bgen(jjtree) #AlgXunion( 2) */
                             {
                               ASTAlgXunion jjtn002 = new ASTAlgXunion(JJTALGXUNION);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtreeOpenNodeScope(jjtn002);
                             }
                             try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtreeCloseNodeScope(jjtn002);
                               }
                             }
/*@egen*/								             
		|	<D_UNION>/*@bgen(jjtree) #AlgDUnion( 2) */
                                  {
                                    ASTAlgDUnion jjtn003 = new ASTAlgDUnion(JJTALGDUNION);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
                                    jjtreeOpenNodeScope(jjtn003);
                                  }
                                  try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte003) {
                                    if (jjtc003) {
                                      jjtree.clearNodeScope(jjtn003);
                                      jjtc003 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte003 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte003;
                                    }
                                    if (jjte003 instanceof ParseException) {
                                      throw (ParseException)jjte003;
                                    }
                                    throw (Error)jjte003;
                                  } finally {
                                    if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003,  2);
                                      jjtreeCloseNodeScope(jjtn003);
                                    }
                                  }
/*@egen*/ 							              
		|	<INTERSECT>/*@bgen(jjtree) #AlgIntersect( 2) */
                                    {
                                      ASTAlgIntersect jjtn004 = new ASTAlgIntersect(JJTALGINTERSECT);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                      jjtreeOpenNodeScope(jjtn004);
                                    }
                                    try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte004) {
                                      if (jjtc004) {
                                        jjtree.clearNodeScope(jjtn004);
                                        jjtc004 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte004 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte004;
                                      }
                                      if (jjte004 instanceof ParseException) {
                                        throw (ParseException)jjte004;
                                      }
                                      throw (Error)jjte004;
                                    } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004,  2);
                                        jjtreeCloseNodeScope(jjtn004);
                                      }
                                    }
/*@egen*/ 							                
		|	<MINUS>/*@bgen(jjtree) #AlgMinus( 2) */
                                {
                                  ASTAlgMinus jjtn005 = new ASTAlgMinus(JJTALGMINUS);
                                  boolean jjtc005 = true;
                                  jjtree.openNodeScope(jjtn005);
                                  jjtreeOpenNodeScope(jjtn005);
                                }
                                try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                } catch (Throwable jjte005) {
                                  if (jjtc005) {
                                    jjtree.clearNodeScope(jjtn005);
                                    jjtc005 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte005 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte005;
                                  }
                                  if (jjte005 instanceof ParseException) {
                                    throw (ParseException)jjte005;
                                  }
                                  throw (Error)jjte005;
                                } finally {
                                  if (jjtc005) {
                                    jjtree.closeNodeScope(jjtn005,  2);
                                    jjtreeCloseNodeScope(jjtn005);
                                  }
                                }
/*@egen*/ 								            
		|	<I_MINUS>/*@bgen(jjtree) #AlgIMinus( 2) */
                                  {
                                    ASTAlgIMinus jjtn006 = new ASTAlgIMinus(JJTALGIMINUS);
                                    boolean jjtc006 = true;
                                    jjtree.openNodeScope(jjtn006);
                                    jjtreeOpenNodeScope(jjtn006);
                                  }
                                  try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte006) {
                                    if (jjtc006) {
                                      jjtree.clearNodeScope(jjtn006);
                                      jjtc006 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte006 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte006;
                                    }
                                    if (jjte006 instanceof ParseException) {
                                      throw (ParseException)jjte006;
                                    }
                                    throw (Error)jjte006;
                                  } finally {
                                    if (jjtc006) {
                                      jjtree.closeNodeScope(jjtn006,  2);
                                      jjtreeCloseNodeScope(jjtn006);
                                    }
                                  }
/*@egen*/ 							             
		|	<JOIN>/*@bgen(jjtree) #AlgJoin( 2) */
                               {
                                 ASTAlgJoin jjtn007 = new ASTAlgJoin(JJTALGJOIN);
                                 boolean jjtc007 = true;
                                 jjtree.openNodeScope(jjtn007);
                                 jjtreeOpenNodeScope(jjtn007);
                               }
                               try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                               } catch (Throwable jjte007) {
                                 if (jjtc007) {
                                   jjtree.clearNodeScope(jjtn007);
                                   jjtc007 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte007 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte007;
                                 }
                                 if (jjte007 instanceof ParseException) {
                                   throw (ParseException)jjte007;
                                 }
                                 throw (Error)jjte007;
                               } finally {
                                 if (jjtc007) {
                                   jjtree.closeNodeScope(jjtn007,  2);
                                   jjtreeCloseNodeScope(jjtn007);
                                 }
                               }
/*@egen*/ 								           
		|	<TIMES>/*@bgen(jjtree) #AlgTimes( 2) */
                                {
                                  ASTAlgTimes jjtn008 = new ASTAlgTimes(JJTALGTIMES);
                                  boolean jjtc008 = true;
                                  jjtree.openNodeScope(jjtn008);
                                  jjtreeOpenNodeScope(jjtn008);
                                }
                                try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                } catch (Throwable jjte008) {
                                  if (jjtc008) {
                                    jjtree.clearNodeScope(jjtn008);
                                    jjtc008 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte008 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte008;
                                  }
                                  if (jjte008 instanceof ParseException) {
                                    throw (ParseException)jjte008;
                                  }
                                  throw (Error)jjte008;
                                } finally {
                                  if (jjtc008) {
                                    jjtree.closeNodeScope(jjtn008,  2);
                                    jjtreeCloseNodeScope(jjtn008);
                                  }
                                }
/*@egen*/ 								            
		|	<COMPOSE>/*@bgen(jjtree) #AlgCompose( 2) */
                                  {
                                    ASTAlgCompose jjtn009 = new ASTAlgCompose(JJTALGCOMPOSE);
                                    boolean jjtc009 = true;
                                    jjtree.openNodeScope(jjtn009);
                                    jjtreeOpenNodeScope(jjtn009);
                                  }
                                  try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte009) {
                                    if (jjtc009) {
                                      jjtree.clearNodeScope(jjtn009);
                                      jjtc009 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte009 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte009;
                                    }
                                    if (jjte009 instanceof ParseException) {
                                      throw (ParseException)jjte009;
                                    }
                                    throw (Error)jjte009;
                                  } finally {
                                    if (jjtc009) {
                                      jjtree.closeNodeScope(jjtn009,  2);
                                      jjtreeCloseNodeScope(jjtn009);
                                    }
                                  }
/*@egen*/ 							              
		|	( <SEMIJOIN> | <MATCHING> )/*@bgen(jjtree) #AlgSemijoin( 2) */
                                                    {
                                                      ASTAlgSemijoin jjtn010 = new ASTAlgSemijoin(JJTALGSEMIJOIN);
                                                      boolean jjtc010 = true;
                                                      jjtree.openNodeScope(jjtn010);
                                                      jjtreeOpenNodeScope(jjtn010);
                                                    }
                                                    try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte010) {
                                                      if (jjtc010) {
                                                        jjtree.clearNodeScope(jjtn010);
                                                        jjtc010 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte010 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte010;
                                                      }
                                                      if (jjte010 instanceof ParseException) {
                                                        throw (ParseException)jjte010;
                                                      }
                                                      throw (Error)jjte010;
                                                    } finally {
                                                      if (jjtc010) {
                                                        jjtree.closeNodeScope(jjtn010,  2);
                                                        jjtreeCloseNodeScope(jjtn010);
                                                      }
                                                    }
/*@egen*/ 			               
		|	( <SEMIMINUS> | <NOT> <MATCHING> )/*@bgen(jjtree) #AlgSemiminus( 2) */
                                                           {
                                                             ASTAlgSemiminus jjtn011 = new ASTAlgSemiminus(JJTALGSEMIMINUS);
                                                             boolean jjtc011 = true;
                                                             jjtree.openNodeScope(jjtn011);
                                                             jjtreeOpenNodeScope(jjtn011);
                                                           }
                                                           try {
/*@egen*/ rel_monadic()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte011) {
                                                             if (jjtc011) {
                                                               jjtree.clearNodeScope(jjtn011);
                                                               jjtc011 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte011 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte011;
                                                             }
                                                             if (jjte011 instanceof ParseException) {
                                                               throw (ParseException)jjte011;
                                                             }
                                                             throw (Error)jjte011;
                                                           } finally {
                                                             if (jjtc011) {
                                                               jjtree.closeNodeScope(jjtn011,  2);
                                                               jjtreeCloseNodeScope(jjtn011);
                                                             }
                                                           }
/*@egen*/	                 
	)*
}

void rel_monadic() :
{}
{
  	// Parentheses around WRAP, UNWRAP, GROUP, UNGROUP removed as of 1.0.11
	rel_project() [
			<RENAME> "{" renaming_commalist()/*@bgen(jjtree) #AlgRename( 2) */
                                                          {
                                                            ASTAlgRename jjtn001 = new ASTAlgRename(JJTALGRENAME);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
                                                            jjtreeOpenNodeScope(jjtn001);
                                                          }
                                                          try {
/*@egen*/ "}"/*@bgen(jjtree)*/
                                                          } finally {
                                                            if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                              jjtreeCloseNodeScope(jjtn001);
                                                            }
                                                          }
/*@egen*/ 				             
		|	<WRAP>/*@bgen(jjtree) #AlgWrap( 2) */
                               {
                                 ASTAlgWrap jjtn002 = new ASTAlgWrap(JJTALGWRAP);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                                 jjtreeOpenNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ wrapping()/*@bgen(jjtree)*/
                               } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte002;
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   throw (ParseException)jjte002;
                                 }
                                 throw (Error)jjte002;
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                   jjtreeCloseNodeScope(jjtn002);
                                 }
                               }
/*@egen*/  									           
		|	<UNWRAP>/*@bgen(jjtree) #AlgUnwrap( 2) */
                                 {
                                   ASTAlgUnwrap jjtn003 = new ASTAlgUnwrap(JJTALGUNWRAP);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                   jjtreeOpenNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte003) {
                                   if (jjtc003) {
                                     jjtree.clearNodeScope(jjtn003);
                                     jjtc003 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte003 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte003;
                                   }
                                   if (jjte003 instanceof ParseException) {
                                     throw (ParseException)jjte003;
                                   }
                                   throw (Error)jjte003;
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                     jjtreeCloseNodeScope(jjtn003);
                                   }
                                 }
/*@egen*/  								              
		|	<GROUP> grouping()
		|	<UNGROUP>/*@bgen(jjtree) #AlgUngroup( 2) */
                                  {
                                    ASTAlgUngroup jjtn004 = new ASTAlgUngroup(JJTALGUNGROUP);
                                    boolean jjtc004 = true;
                                    jjtree.openNodeScope(jjtn004);
                                    jjtreeOpenNodeScope(jjtn004);
                                  }
                                  try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte004) {
                                    if (jjtc004) {
                                      jjtree.clearNodeScope(jjtn004);
                                      jjtc004 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte004 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte004;
                                    }
                                    if (jjte004 instanceof ParseException) {
                                      throw (ParseException)jjte004;
                                    }
                                    throw (Error)jjte004;
                                  } finally {
                                    if (jjtc004) {
                                      jjtree.closeNodeScope(jjtn004,  2);
                                      jjtreeCloseNodeScope(jjtn004);
                                    }
                                  }
/*@egen*/		 						              
		|	<DIVIDEBY> expression() <PER> "(" expression() divide_per_optional()/*@bgen(jjtree) #AlgDivide( 4) */
                                                                                             {
                                                                                               ASTAlgDivide jjtn005 = new ASTAlgDivide(JJTALGDIVIDE);
                                                                                               boolean jjtc005 = true;
                                                                                               jjtree.openNodeScope(jjtn005);
                                                                                               jjtreeOpenNodeScope(jjtn005);
                                                                                             }
                                                                                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                             } finally {
                                                                                               if (jjtc005) {
                                                                                                 jjtree.closeNodeScope(jjtn005,  4);
                                                                                                 jjtreeCloseNodeScope(jjtn005);
                                                                                               }
                                                                                             }
/*@egen*/              
	]
}

/* Not explicitly defined in TTM3 */
void order_item_commalist()                     :
{/*@bgen(jjtree) OrderItemCommalist */
  ASTOrderItemCommalist jjtn000 = new ASTOrderItemCommalist(JJTORDERITEMCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderItemCommalist */
        try {
/*@egen*/
	[ order_item() ( "," order_item() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void order_item() :
{}
{
      <ASC>/*@bgen(jjtree) OrderItemAsc */
               {
                 ASTOrderItemAsc jjtn001 = new ASTOrderItemAsc(JJTORDERITEMASC);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*/    identifier()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/                
	| <DESC>/*@bgen(jjtree) OrderItemDesc */
                   {
                     ASTOrderItemDesc jjtn002 = new ASTOrderItemDesc(JJTORDERITEMDESC);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtreeOpenNodeScope(jjtn002);
                   }
                   try {
/*@egen*/   identifier()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtreeCloseNodeScope(jjtn002);
                     }
                   }
/*@egen*/	               
}

void divide_per_optional()                       :
{/*@bgen(jjtree) AlgDividePerOptional */
  ASTAlgDividePerOptional jjtn000 = new ASTAlgDividePerOptional(JJTALGDIVIDEPEROPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AlgDividePerOptional */
        try {
/*@egen*/
	[ "," expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void rel_project() :
{}
{
	add_expression() [ "{" attribute_name_list()/*@bgen(jjtree) #AlgProject( 2) */
                                                     {
                                                       ASTAlgProject jjtn001 = new ASTAlgProject(JJTALGPROJECT);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                       jjtreeOpenNodeScope(jjtn001);
                                                     }
                                                     try {
/*@egen*/ "}"/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                         jjtreeCloseNodeScope(jjtn001);
                                                       }
                                                     }
/*@egen*/                ]
}

void grouping() :
{}
{
	"{" attribute_name_list() "}" <AS>/*@bgen(jjtree) #Group( 3) */
                                           {
                                             ASTGroup jjtn001 = new ASTGroup(JJTGROUP);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                             jjtreeOpenNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*/ identifier()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte001) {
                                             if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte001;
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               throw (ParseException)jjte001;
                                             }
                                             throw (Error)jjte001;
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  3);
                                               jjtreeCloseNodeScope(jjtn001);
                                             }
                                           }
/*@egen*/          
}

void wrapping()               :
{/*@bgen(jjtree) WrappingItem */
  ASTWrappingItem jjtn000 = new ASTWrappingItem(JJTWRAPPINGITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WrappingItem */
        try {
/*@egen*/
	"{" attribute_name_list() "}" <AS> identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void renaming_commalist()               :
{/*@bgen(jjtree) RenamingList */
  ASTRenamingList jjtn000 = new ASTRenamingList(JJTRENAMINGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RenamingList */
        try {
/*@egen*/
	[ renaming() ( "," renaming() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void renaming() :
{}
{
		renaming_simple()
	|	renaming_prefix()
	|	renaming_suffix()
}

void renaming_simple()                 :
{/*@bgen(jjtree) RenamingSimple */
  ASTRenamingSimple jjtn000 = new ASTRenamingSimple(JJTRENAMINGSIMPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RenamingSimple */
        try {
/*@egen*/
	identifier() <AS> identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void renaming_prefix()                 :
{/*@bgen(jjtree) RenamingPrefix */
  ASTRenamingPrefix jjtn000 = new ASTRenamingPrefix(JJTRENAMINGPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RenamingPrefix */
        try {
/*@egen*/
	<PREFIX> string_literal() <AS> string_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void renaming_suffix()                 :
{/*@bgen(jjtree) RenamingSuffix */
  ASTRenamingSuffix jjtn000 = new ASTRenamingSuffix(JJTRENAMINGSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RenamingSuffix */
        try {
/*@egen*/
	<SUFFIX> string_literal() <AS> string_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/	
}

void attribute_name_list()                    :
{/*@bgen(jjtree) AttributeNameList */
  ASTAttributeNameList jjtn000 = new ASTAttributeNameList(JJTATTRIBUTENAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeNameList */
        try {
/*@egen*/
	optional_all_but() attribute_name_commalist()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void optional_all_but()         :
{/*@bgen(jjtree) AllBut */
  ASTAllBut jjtn000 = new ASTAllBut(JJTALLBUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AllBut */
        try {
/*@egen*/
	[ <ALL>/*@bgen(jjtree) AllBut */
                {
                  ASTAllBut jjtn001 = new ASTAllBut(JJTALLBUT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/ <BUT>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/         ]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void attribute_name_commalist()                         :
{/*@bgen(jjtree) AttributeNameCommalist */
  ASTAttributeNameCommalist jjtn000 = new ASTAttributeNameCommalist(JJTATTRIBUTENAMECOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeNameCommalist */
        try {
/*@egen*/
	[ identifier() ( "," identifier() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void add_expression() : 
{} 
{
	mul_expression() (
			"+"/*@bgen(jjtree) #Add( 2) */
                             {
                               ASTAdd jjtn001 = new ASTAdd(JJTADD);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
                             }
                             try {
/*@egen*/  mul_expression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtreeCloseNodeScope(jjtn001);
                               }
                             }
/*@egen*/        
		| 	"-"/*@bgen(jjtree) #Subtract( 2) */
                             {
                               ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtreeOpenNodeScope(jjtn002);
                             }
                             try {
/*@egen*/  mul_expression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtreeCloseNodeScope(jjtn002);
                               }
                             }
/*@egen*/             
		|	"||"/*@bgen(jjtree) #Concatenate( 2) */
                             {
                               ASTConcatenate jjtn003 = new ASTConcatenate(JJTCONCATENATE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                               jjtreeOpenNodeScope(jjtn003);
                             }
                             try {
/*@egen*/ mul_expression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte003;
                               }
                               if (jjte003 instanceof ParseException) {
                                 throw (ParseException)jjte003;
                               }
                               throw (Error)jjte003;
                             } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtreeCloseNodeScope(jjtn003);
                               }
                             }
/*@egen*/                
	)*
}

void mul_expression() : 
{} 
{ 
	unary_expression() ( 
			"*"/*@bgen(jjtree) #Times( 2) */
                            {
                              ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtreeCloseNodeScope(jjtn001);
                              }
                            }
/*@egen*/          
		|	"/"/*@bgen(jjtree) #Divide( 2) */
                            {
                              ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtreeOpenNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                            } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                throw (RuntimeException)jjte002;
                              }
                              if (jjte002 instanceof ParseException) {
                                throw (ParseException)jjte002;
                              }
                              throw (Error)jjte002;
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtreeCloseNodeScope(jjtn002);
                              }
                            }
/*@egen*/           
	)*
}

void unary_expression() :
{}
{
		<NOT>/*@bgen(jjtree) #UnaryNot( 1) */
                      {
                        ASTUnaryNot jjtn001 = new ASTUnaryNot(JJTUNARYNOT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  1);
                          jjtreeCloseNodeScope(jjtn001);
                        }
                      }
/*@egen*/             
	| 	"+"/*@bgen(jjtree) #UnaryPlus( 1) */
                      {
                        ASTUnaryPlus jjtn002 = new ASTUnaryPlus(JJTUNARYPLUS);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
                      }
                      try {
/*@egen*/   unary_expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          throw (RuntimeException)jjte002;
                        }
                        if (jjte002 instanceof ParseException) {
                          throw (ParseException)jjte002;
                        }
                        throw (Error)jjte002;
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  1);
                          jjtreeCloseNodeScope(jjtn002);
                        }
                      }
/*@egen*/              
	|	"-"/*@bgen(jjtree) #UnaryMinus( 1) */
                      {
                        ASTUnaryMinus jjtn003 = new ASTUnaryMinus(JJTUNARYMINUS);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                      }
                      try {
/*@egen*/   unary_expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte003) {
                        if (jjtc003) {
                          jjtree.clearNodeScope(jjtn003);
                          jjtc003 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                          throw (RuntimeException)jjte003;
                        }
                        if (jjte003 instanceof ParseException) {
                          throw (ParseException)jjte003;
                        }
                        throw (Error)jjte003;
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003,  1);
                          jjtreeCloseNodeScope(jjtn003);
                        }
                      }
/*@egen*/               
	|		  primary_expression()
}

void primary_expression() : 
{}
{
		literal()
	|	LOOKAHEAD(2) aggregate_operator()
	|	exactly()
	|	nadic_or()
	|	nadic_xor()
	|	nadic_and()
	|	nadic_union()
	|	nadic_xunion()
	|	nadic_disjoint_union()
	|	nadic_intersect()
	|	nadic_join()
	|	nadic_times()
	| 	nadic_compose()
	|	nadic_count()
	|	nadic_sum()
	|	nadic_avg()
	|	nadic_max()
	|	nadic_min()
	|	extend()
	|	summarize()
	|	substitute()
	|	case_expression()
	|	if_expression()
	|	LOOKAHEAD(2) fn_invoke() 
	| 	dereference() 
	| 	"(" expression() ")"
}

void case_expression()                 :
{/*@bgen(jjtree) CaseExpression */
  ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseExpression */
        try {
/*@egen*/
	<CASE> 
	when_def_list_expr() 
	<ELSE> expression() 
	<END> <CASE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void when_def_list_expr()                         :
{/*@bgen(jjtree) CaseWhenListExpression */
  ASTCaseWhenListExpression jjtn000 = new ASTCaseWhenListExpression(JJTCASEWHENLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseWhenListExpression */
        try {
/*@egen*/
	when_def_expr() ( when_def_expr() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void when_def_expr()                     :
{/*@bgen(jjtree) CaseWhenExpression */
  ASTCaseWhenExpression jjtn000 = new ASTCaseWhenExpression(JJTCASEWHENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseWhenExpression */
        try {
/*@egen*/
	<WHEN> expression() <THEN> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void if_expression()               :
{/*@bgen(jjtree) IfExpression */
  ASTIfExpression jjtn000 = new ASTIfExpression(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfExpression */
        try {
/*@egen*/
	<IF> expression() <THEN> expression() 
	<ELSE> expression()
	<END> <IF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* Update expression, *not* assignment.
Contents of expression() does not change! */
void substitute()             :
{/*@bgen(jjtree) Substitute */
  ASTSubstitute jjtn000 = new ASTSubstitute(JJTSUBSTITUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Substitute */
        try {
/*@egen*/
	<UPDATE> expression() ":" update_assignment()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_optional_heading() :
{}
{	     LOOKAHEAD(heading() "{" heading_exp_commalist() "}")/*@bgen(jjtree) NadicHeading */
                                                                  {
                                                                    ASTNadicHeading jjtn001 = new ASTNadicHeading(JJTNADICHEADING);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
                                                                    jjtreeOpenNodeScope(jjtn001);
                                                                  }
                                                                  try {
/*@egen*/ heading()/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte001;
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      throw (ParseException)jjte001;
                                                                    }
                                                                    throw (Error)jjte001;
                                                                  } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                      jjtreeCloseNodeScope(jjtn001);
                                                                    }
                                                                  }
/*@egen*/               "{" heading_exp_commalist() "}"
	   | "{" heading_exp_commalist() "}" 
}

void nadic_union()             :
{/*@bgen(jjtree) NadicUnion */
  ASTNadicUnion jjtn000 = new ASTNadicUnion(JJTNADICUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicUnion */
        try {
/*@egen*/
	<UNION> nadic_optional_heading()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_xunion()              :
{/*@bgen(jjtree) NadicXunion */
  ASTNadicXunion jjtn000 = new ASTNadicXunion(JJTNADICXUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicXunion */
        try {
/*@egen*/
	<XUNION> nadic_optional_heading()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_disjoint_union()              :
{/*@bgen(jjtree) NadicDUnion */
  ASTNadicDUnion jjtn000 = new ASTNadicDUnion(JJTNADICDUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicDUnion */
        try {
/*@egen*/
	<D_UNION> nadic_optional_heading()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_intersect()                 :
{/*@bgen(jjtree) NadicIntersect */
  ASTNadicIntersect jjtn000 = new ASTNadicIntersect(JJTNADICINTERSECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicIntersect */
        try {
/*@egen*/
	<INTERSECT> nadic_optional_heading()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_join()            :
{/*@bgen(jjtree) NadicJoin */
  ASTNadicJoin jjtn000 = new ASTNadicJoin(JJTNADICJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicJoin */
        try {
/*@egen*/
	<JOIN> "{" heading_exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_times()             :
{/*@bgen(jjtree) NadicTimes */
  ASTNadicTimes jjtn000 = new ASTNadicTimes(JJTNADICTIMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicTimes */
        try {
/*@egen*/	<TIMES> "{" heading_exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_compose()               :
{/*@bgen(jjtree) NadicCompose */
  ASTNadicCompose jjtn000 = new ASTNadicCompose(JJTNADICCOMPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicCompose */
        try {
/*@egen*/	<COMPOSE> "{" heading_exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_or()          :
{/*@bgen(jjtree) NadicOr */
  ASTNadicOr jjtn000 = new ASTNadicOr(JJTNADICOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicOr */
        try {
/*@egen*/
	<OR> "{" bool_exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_xor()           :
{/*@bgen(jjtree) NadicXor */
  ASTNadicXor jjtn000 = new ASTNadicXor(JJTNADICXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicXor */
        try {
/*@egen*/
	<XOR> "{" bool_exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_and()           :
{/*@bgen(jjtree) NadicAnd */
  ASTNadicAnd jjtn000 = new ASTNadicAnd(JJTNADICAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicAnd */
        try {
/*@egen*/
	<AND> "{" bool_exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_count()             :
{/*@bgen(jjtree) NadicCount */
  ASTNadicCount jjtn000 = new ASTNadicCount(JJTNADICCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicCount */
        try {
/*@egen*/
	<COUNT> "{" exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_sum()           :
{/*@bgen(jjtree) NadicSum */
  ASTNadicSum jjtn000 = new ASTNadicSum(JJTNADICSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicSum */
        try {
/*@egen*/
	<SUM> "{" exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_avg()           :
{/*@bgen(jjtree) NadicAvg */
  ASTNadicAvg jjtn000 = new ASTNadicAvg(JJTNADICAVG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicAvg */
        try {
/*@egen*/
	<AVG> "{" exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_max()           :
{/*@bgen(jjtree) NadicMax */
  ASTNadicMax jjtn000 = new ASTNadicMax(JJTNADICMAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicMax */
        try {
/*@egen*/
	<MAX> "{" exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void nadic_min()           :
{/*@bgen(jjtree) NadicMin */
  ASTNadicMin jjtn000 = new ASTNadicMin(JJTNADICMIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NadicMin */
        try {
/*@egen*/
	<MIN> "{" exp_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void exactly()          :
{/*@bgen(jjtree) Exactly */
  ASTExactly jjtn000 = new ASTExactly(JJTEXACTLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exactly */
        try {
/*@egen*/
	<EXACTLY> "(" expression() [ "," expression() ( "," expression() )* ] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void exp_commalist()                      :
{/*@bgen(jjtree) ExpressionCommalist */
  ASTExpressionCommalist jjtn000 = new ASTExpressionCommalist(JJTEXPRESSIONCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionCommalist */
        try {
/*@egen*/
	[ expression() ( "," expression() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void bool_exp_commalist()                             :
{/*@bgen(jjtree) BooleanExpressionCommalist */
  ASTBooleanExpressionCommalist jjtn000 = new ASTBooleanExpressionCommalist(JJTBOOLEANEXPRESSIONCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanExpressionCommalist */
        try {
/*@egen*/
	[ expression() ( "," expression() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void heading_exp_commalist()                      :
{/*@bgen(jjtree) HeadingExpCommalist */
  ASTHeadingExpCommalist jjtn000 = new ASTHeadingExpCommalist(JJTHEADINGEXPCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HeadingExpCommalist */
        try {
/*@egen*/
	[ expression() ( "," expression() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void extend()         :
{/*@bgen(jjtree) Extend */
  ASTExtend jjtn000 = new ASTExtend(JJTEXTEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Extend */
        try {
/*@egen*/
	<EXTEND> expression() ":" "{" extend_add_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void extend_add_commalist()             :
{/*@bgen(jjtree) ExtendList */
  ASTExtendList jjtn000 = new ASTExtendList(JJTEXTENDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtendList */
        try {
/*@egen*/
	extend_add() ( "," extend_add() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void extend_add()             :
{/*@bgen(jjtree) ExtendItem */
  ASTExtendItem jjtn000 = new ASTExtendItem(JJTEXTENDITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtendItem */
        try {
/*@egen*/
	identifier() ":=" expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void summarize()            :
{/*@bgen(jjtree) Summarize */
  ASTSummarize jjtn000 = new ASTSummarize(JJTSUMMARIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Summarize */
        try {
/*@egen*/
	<SUMMARIZE> expression() per_or_by() ":" "{" summarize_add_commalist() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void per_or_by()                   :
{/*@bgen(jjtree) SummarizePerOrBy */
  ASTSummarizePerOrBy jjtn000 = new ASTSummarizePerOrBy(JJTSUMMARIZEPERORBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SummarizePerOrBy */
        try {
/*@egen*/
	[
			<PER> "(" expression()/*@bgen(jjtree) #SummarizePer( 1) */
                                               {
                                                 ASTSummarizePer jjtn001 = new ASTSummarizePer(JJTSUMMARIZEPER);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtreeOpenNodeScope(jjtn001);
                                               }
                                               try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001,  1);
                                                   jjtreeCloseNodeScope(jjtn001);
                                                 }
                                               }
/*@egen*/                 
		|	<BY> "{" attribute_name_list()/*@bgen(jjtree) #SummarizeBy( 1) */
                                                       {
                                                         ASTSummarizeBy jjtn002 = new ASTSummarizeBy(JJTSUMMARIZEBY);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
                                                         jjtreeOpenNodeScope(jjtn002);
                                                       }
                                                       try {
/*@egen*/ "}"/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  1);
                                                           jjtreeCloseNodeScope(jjtn002);
                                                         }
                                                       }
/*@egen*/                
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void summarize_add_commalist()                 :
{/*@bgen(jjtree) SummarizeItems */
  ASTSummarizeItems jjtn000 = new ASTSummarizeItems(JJTSUMMARIZEITEMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SummarizeItems */
        try {
/*@egen*/
	summarize_add() ( "," summarize_add() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void summarize_add()                :
{/*@bgen(jjtree) SummarizeItem */
  ASTSummarizeItem jjtn000 = new ASTSummarizeItem(JJTSUMMARIZEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SummarizeItem */
        try {
/*@egen*/
	identifier() ":=" summary()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void summary() :
{}
{
		<COUNT>	"("/*@bgen(jjtree) SummarizeCount */
                                {
                                  ASTSummarizeCount jjtn001 = new ASTSummarizeCount(JJTSUMMARIZECOUNT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/	")"/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/										               
	|	<COUNTD> "(" expression()/*@bgen(jjtree) #SummarizeCountDistinct( 1) */
                                          {
                                            ASTSummarizeCountDistinct jjtn002 = new ASTSummarizeCountDistinct(JJTSUMMARIZECOUNTDISTINCT);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
                                            jjtreeOpenNodeScope(jjtn002);
                                          }
                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002,  1);
                                              jjtreeCloseNodeScope(jjtn002);
                                            }
                                          }
/*@egen*/ 						                          
	|	<SUM> "(" expression()/*@bgen(jjtree) #SummarizeSum( 1) */
                                       {
                                         ASTSummarizeSum jjtn003 = new ASTSummarizeSum(JJTSUMMARIZESUM);
                                         boolean jjtc003 = true;
                                         jjtree.openNodeScope(jjtn003);
                                         jjtreeOpenNodeScope(jjtn003);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc003) {
                                           jjtree.closeNodeScope(jjtn003,  1);
                                           jjtreeCloseNodeScope(jjtn003);
                                         }
                                       }
/*@egen*/							                 
	|	<SUMD> "(" expression()/*@bgen(jjtree) #SummarizeSumDistinct( 1) */
                                        {
                                          ASTSummarizeSumDistinct jjtn004 = new ASTSummarizeSumDistinct(JJTSUMMARIZESUMDISTINCT);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                          jjtreeOpenNodeScope(jjtn004);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  1);
                                            jjtreeCloseNodeScope(jjtn004);
                                          }
                                        }
/*@egen*/							                         
	|	<AVG> "(" expression()/*@bgen(jjtree) #SummarizeAvg( 1) */
                                       {
                                         ASTSummarizeAvg jjtn005 = new ASTSummarizeAvg(JJTSUMMARIZEAVG);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
                                         jjtreeOpenNodeScope(jjtn005);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005,  1);
                                           jjtreeCloseNodeScope(jjtn005);
                                         }
                                       }
/*@egen*/							                 
	|	<AVGD> "(" expression()/*@bgen(jjtree) #SummarizeAvgDistinct( 1) */
                                        {
                                          ASTSummarizeAvgDistinct jjtn006 = new ASTSummarizeAvgDistinct(JJTSUMMARIZEAVGDISTINCT);
                                          boolean jjtc006 = true;
                                          jjtree.openNodeScope(jjtn006);
                                          jjtreeOpenNodeScope(jjtn006);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc006) {
                                            jjtree.closeNodeScope(jjtn006,  1);
                                            jjtreeCloseNodeScope(jjtn006);
                                          }
                                        }
/*@egen*/							                         
	|	<MAX> "(" expression()/*@bgen(jjtree) #SummarizeMax( 1) */
                                       {
                                         ASTSummarizeMax jjtn007 = new ASTSummarizeMax(JJTSUMMARIZEMAX);
                                         boolean jjtc007 = true;
                                         jjtree.openNodeScope(jjtn007);
                                         jjtreeOpenNodeScope(jjtn007);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc007) {
                                           jjtree.closeNodeScope(jjtn007,  1);
                                           jjtreeCloseNodeScope(jjtn007);
                                         }
                                       }
/*@egen*/							                 
	|	<MIN> "(" expression()/*@bgen(jjtree) #SummarizeMin( 1) */
                                       {
                                         ASTSummarizeMin jjtn008 = new ASTSummarizeMin(JJTSUMMARIZEMIN);
                                         boolean jjtc008 = true;
                                         jjtree.openNodeScope(jjtn008);
                                         jjtreeOpenNodeScope(jjtn008);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc008) {
                                           jjtree.closeNodeScope(jjtn008,  1);
                                           jjtreeCloseNodeScope(jjtn008);
                                         }
                                       }
/*@egen*/							                 
	|	<AND> "(" expression()/*@bgen(jjtree) #SummarizeAnd( 1) */
                                       {
                                         ASTSummarizeAnd jjtn009 = new ASTSummarizeAnd(JJTSUMMARIZEAND);
                                         boolean jjtc009 = true;
                                         jjtree.openNodeScope(jjtn009);
                                         jjtreeOpenNodeScope(jjtn009);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc009) {
                                           jjtree.closeNodeScope(jjtn009,  1);
                                           jjtreeCloseNodeScope(jjtn009);
                                         }
                                       }
/*@egen*/					 		                
	|	<OR> "(" expression()/*@bgen(jjtree) #SummarizeOr( 1) */
                                      {
                                        ASTSummarizeOr jjtn010 = new ASTSummarizeOr(JJTSUMMARIZEOR);
                                        boolean jjtc010 = true;
                                        jjtree.openNodeScope(jjtn010);
                                        jjtreeOpenNodeScope(jjtn010);
                                      }
                                      try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc010) {
                                          jjtree.closeNodeScope(jjtn010,  1);
                                          jjtreeCloseNodeScope(jjtn010);
                                        }
                                      }
/*@egen*/							                
	|	<XOR> "(" expression()/*@bgen(jjtree) #SummarizeXor( 1) */
                                       {
                                         ASTSummarizeXor jjtn011 = new ASTSummarizeXor(JJTSUMMARIZEXOR);
                                         boolean jjtc011 = true;
                                         jjtree.openNodeScope(jjtn011);
                                         jjtreeOpenNodeScope(jjtn011);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc011) {
                                           jjtree.closeNodeScope(jjtn011,  1);
                                           jjtreeCloseNodeScope(jjtn011);
                                         }
                                       }
/*@egen*/							                 
	|	<EXACTLY> "(" expression() "," expression()/*@bgen(jjtree) #SummarizeExactly( 2) */
                                                            {
                                                              ASTSummarizeExactly jjtn012 = new ASTSummarizeExactly(JJTSUMMARIZEEXACTLY);
                                                              boolean jjtc012 = true;
                                                              jjtree.openNodeScope(jjtn012);
                                                              jjtreeOpenNodeScope(jjtn012);
                                                            }
                                                            try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc012) {
                                                                jjtree.closeNodeScope(jjtn012,  2);
                                                                jjtreeCloseNodeScope(jjtn012);
                                                              }
                                                            }
/*@egen*/	 	                    
	|	<EXACTLYD> "(" expression() "," expression()/*@bgen(jjtree) #SummarizeExactlyDistinct( 2) */
                                                             {
                                                               ASTSummarizeExactlyDistinct jjtn013 = new ASTSummarizeExactlyDistinct(JJTSUMMARIZEEXACTLYDISTINCT);
                                                               boolean jjtc013 = true;
                                                               jjtree.openNodeScope(jjtn013);
                                                               jjtreeOpenNodeScope(jjtn013);
                                                             }
                                                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc013) {
                                                                 jjtree.closeNodeScope(jjtn013,  2);
                                                                 jjtreeCloseNodeScope(jjtn013);
                                                               }
                                                             }
/*@egen*/	                             
	|	<UNION> "(" expression()/*@bgen(jjtree) #SummarizeUnion( 1) */
                                         {
                                           ASTSummarizeUnion jjtn014 = new ASTSummarizeUnion(JJTSUMMARIZEUNION);
                                           boolean jjtc014 = true;
                                           jjtree.openNodeScope(jjtn014);
                                           jjtreeOpenNodeScope(jjtn014);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc014) {
                                             jjtree.closeNodeScope(jjtn014,  1);
                                             jjtreeCloseNodeScope(jjtn014);
                                           }
                                         }
/*@egen*/						                   
	|	<XUNION> "(" expression()/*@bgen(jjtree) #SummarizeXunion( 1) */
                                          {
                                            ASTSummarizeXunion jjtn015 = new ASTSummarizeXunion(JJTSUMMARIZEXUNION);
                                            boolean jjtc015 = true;
                                            jjtree.openNodeScope(jjtn015);
                                            jjtreeOpenNodeScope(jjtn015);
                                          }
                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc015) {
                                              jjtree.closeNodeScope(jjtn015,  1);
                                              jjtreeCloseNodeScope(jjtn015);
                                            }
                                          }
/*@egen*/						                    
	|	<D_UNION> "(" expression()/*@bgen(jjtree) #SummarizeDUnion( 1) */
                                           {
                                             ASTSummarizeDUnion jjtn016 = new ASTSummarizeDUnion(JJTSUMMARIZEDUNION);
                                             boolean jjtc016 = true;
                                             jjtree.openNodeScope(jjtn016);
                                             jjtreeOpenNodeScope(jjtn016);
                                           }
                                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc016) {
                                               jjtree.closeNodeScope(jjtn016,  1);
                                               jjtreeCloseNodeScope(jjtn016);
                                             }
                                           }
/*@egen*/ 						                   
	|	<INTERSECT> "(" expression()/*@bgen(jjtree) #SummarizeIntersect( 1) */
                                             {
                                               ASTSummarizeIntersect jjtn017 = new ASTSummarizeIntersect(JJTSUMMARIZEINTERSECT);
                                               boolean jjtc017 = true;
                                               jjtree.openNodeScope(jjtn017);
                                               jjtreeOpenNodeScope(jjtn017);
                                             }
                                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc017) {
                                                 jjtree.closeNodeScope(jjtn017,  1);
                                                 jjtreeCloseNodeScope(jjtn017);
                                               }
                                             }
/*@egen*/ 					                      
}

void fn_invoke()           :
{/*@bgen(jjtree) FnInvoke */
  ASTFnInvoke jjtn000 = new ASTFnInvoke(JJTFNINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FnInvoke */
        try {
/*@egen*/
	identifier() "(" arglist() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void arglist()          :
{/*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
        try {
/*@egen*/
	[ expression() ( "," expression() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void aggregate_operator() :
{}
{
		<COUNT> "(" expression()/*@bgen(jjtree) #AggCount( 1) */
                                         {
                                           ASTAggCount jjtn001 = new ASTAggCount(JJTAGGCOUNT);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                           jjtreeOpenNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  1);
                                             jjtreeCloseNodeScope(jjtn001);
                                           }
                                         }
/*@egen*/							            
	|	<SUM> "(" expression() "," expression()/*@bgen(jjtree) #AggSum( 2) */
                                                        {
                                                          ASTAggSum jjtn002 = new ASTAggSum(JJTAGGSUM);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                          jjtreeOpenNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                            jjtreeCloseNodeScope(jjtn002);
                                                          }
                                                        }
/*@egen*/				          
	|	<AVG> "(" expression() "," expression()/*@bgen(jjtree) #AggAvg( 2) */
                                                        {
                                                          ASTAggAvg jjtn003 = new ASTAggAvg(JJTAGGAVG);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                          jjtreeOpenNodeScope(jjtn003);
                                                        }
                                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                            jjtreeCloseNodeScope(jjtn003);
                                                          }
                                                        }
/*@egen*/				          
	|	<MAX> "(" expression() "," expression()/*@bgen(jjtree) #AggMax( 2) */
                                                        {
                                                          ASTAggMax jjtn004 = new ASTAggMax(JJTAGGMAX);
                                                          boolean jjtc004 = true;
                                                          jjtree.openNodeScope(jjtn004);
                                                          jjtreeOpenNodeScope(jjtn004);
                                                        }
                                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc004) {
                                                            jjtree.closeNodeScope(jjtn004,  2);
                                                            jjtreeCloseNodeScope(jjtn004);
                                                          }
                                                        }
/*@egen*/				          
	|	<MIN> "(" expression() "," expression()/*@bgen(jjtree) #AggMin( 2) */
                                                        {
                                                          ASTAggMin jjtn005 = new ASTAggMin(JJTAGGMIN);
                                                          boolean jjtc005 = true;
                                                          jjtree.openNodeScope(jjtn005);
                                                          jjtreeOpenNodeScope(jjtn005);
                                                        }
                                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc005) {
                                                            jjtree.closeNodeScope(jjtn005,  2);
                                                            jjtreeCloseNodeScope(jjtn005);
                                                          }
                                                        }
/*@egen*/				          				
	|	<AND> "(" expression() "," expression()/*@bgen(jjtree) #AggAnd( 2) */
                                                        {
                                                          ASTAggAnd jjtn006 = new ASTAggAnd(JJTAGGAND);
                                                          boolean jjtc006 = true;
                                                          jjtree.openNodeScope(jjtn006);
                                                          jjtreeOpenNodeScope(jjtn006);
                                                        }
                                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc006) {
                                                            jjtree.closeNodeScope(jjtn006,  2);
                                                            jjtreeCloseNodeScope(jjtn006);
                                                          }
                                                        }
/*@egen*/				          
	|	<OR> "(" expression() "," expression()/*@bgen(jjtree) #AggOr( 2) */
                                                       {
                                                         ASTAggOr jjtn007 = new ASTAggOr(JJTAGGOR);
                                                         boolean jjtc007 = true;
                                                         jjtree.openNodeScope(jjtn007);
                                                         jjtreeOpenNodeScope(jjtn007);
                                                       }
                                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc007) {
                                                           jjtree.closeNodeScope(jjtn007,  2);
                                                           jjtreeCloseNodeScope(jjtn007);
                                                         }
                                                       }
/*@egen*/				         
	|	<XOR> "(" expression() "," expression()/*@bgen(jjtree) #AggXor( 2) */
                                                        {
                                                          ASTAggXor jjtn008 = new ASTAggXor(JJTAGGXOR);
                                                          boolean jjtc008 = true;
                                                          jjtree.openNodeScope(jjtn008);
                                                          jjtreeOpenNodeScope(jjtn008);
                                                        }
                                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc008) {
                                                            jjtree.closeNodeScope(jjtn008,  2);
                                                            jjtreeCloseNodeScope(jjtn008);
                                                          }
                                                        }
/*@egen*/				          
	|	<UNION> "(" expression() "," expression()/*@bgen(jjtree) #AggUnion( 2) */
                                                          {
                                                            ASTAggUnion jjtn009 = new ASTAggUnion(JJTAGGUNION);
                                                            boolean jjtc009 = true;
                                                            jjtree.openNodeScope(jjtn009);
                                                            jjtreeOpenNodeScope(jjtn009);
                                                          }
                                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                          } finally {
                                                            if (jjtc009) {
                                                              jjtree.closeNodeScope(jjtn009,  2);
                                                              jjtreeCloseNodeScope(jjtn009);
                                                            }
                                                          }
/*@egen*/			            
	|	<XUNION> "(" expression() "," expression()/*@bgen(jjtree) #AggXunion( 2) */
                                                           {
                                                             ASTAggXunion jjtn010 = new ASTAggXunion(JJTAGGXUNION);
                                                             boolean jjtc010 = true;
                                                             jjtree.openNodeScope(jjtn010);
                                                             jjtreeOpenNodeScope(jjtn010);
                                                           }
                                                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                           } finally {
                                                             if (jjtc010) {
                                                               jjtree.closeNodeScope(jjtn010,  2);
                                                               jjtreeCloseNodeScope(jjtn010);
                                                             }
                                                           }
/*@egen*/			             
	|	<D_UNION> "(" expression() "," expression()/*@bgen(jjtree) #AggDUnion( 2) */
                                                            {
                                                              ASTAggDUnion jjtn011 = new ASTAggDUnion(JJTAGGDUNION);
                                                              boolean jjtc011 = true;
                                                              jjtree.openNodeScope(jjtn011);
                                                              jjtreeOpenNodeScope(jjtn011);
                                                            }
                                                            try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc011) {
                                                                jjtree.closeNodeScope(jjtn011,  2);
                                                                jjtreeCloseNodeScope(jjtn011);
                                                              }
                                                            }
/*@egen*/			             
	|	<INTERSECT> "(" expression() "," expression()/*@bgen(jjtree) #AggIntersect( 2) */
                                                              {
                                                                ASTAggIntersect jjtn012 = new ASTAggIntersect(JJTAGGINTERSECT);
                                                                boolean jjtc012 = true;
                                                                jjtree.openNodeScope(jjtn012);
                                                                jjtreeOpenNodeScope(jjtn012);
                                                              }
                                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc012) {
                                                                  jjtree.closeNodeScope(jjtn012,  2);
                                                                  jjtreeCloseNodeScope(jjtn012);
                                                                }
                                                              }
/*@egen*/		                
}

void literal() :
{}
{
  		lambda()
	| 	tuple()
	|	relation()
	|	integer()
	|	character()							  	
	|	rational()
	|	bool()
}

void tuple()        :
{/*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tuple */
        try {
/*@egen*/
	<TUPLE> "{" [ tuple_component_commalist() ] "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void tuple_component_commalist() :
{}
{
	tuple_component() ( "," tuple_component() )*
}

void tuple_component()                 :
{/*@bgen(jjtree) TupleComponent */
  ASTTupleComponent jjtn000 = new ASTTupleComponent(JJTTUPLECOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TupleComponent */
        try {
/*@egen*/
	identifier() expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void relation() :
{}
{
		<RELATION> relation_heading() "{" tuple_exp_commalist()/*@bgen(jjtree) #Relation( 2) */
                                                                        {
                                                                          ASTRelation jjtn001 = new ASTRelation(JJTRELATION);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
                                                                          jjtreeOpenNodeScope(jjtn001);
                                                                        }
                                                                        try {
/*@egen*/ "}"/*@bgen(jjtree)*/
                                                                        } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                                            jjtreeCloseNodeScope(jjtn001);
                                                                          }
                                                                        }
/*@egen*/		            
	|/*@bgen(jjtree) RelationDum */
                {
                  ASTRelationDum jjtn002 = new ASTRelationDum(JJTRELATIONDUM);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtreeOpenNodeScope(jjtn002);
                }
                try {
/*@egen*/	<TABLE_DUM>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                  }
                }
/*@egen*/														            
	|/*@bgen(jjtree) RelationDee */
                {
                  ASTRelationDee jjtn003 = new ASTRelationDee(JJTRELATIONDEE);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtreeOpenNodeScope(jjtn003);
                }
                try {
/*@egen*/	<TABLE_DEE>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtreeCloseNodeScope(jjtn003);
                  }
                }
/*@egen*/														            
}

void relation_heading()                  :
{/*@bgen(jjtree) RelationHeading */
  ASTRelationHeading jjtn000 = new ASTRelationHeading(JJTRELATIONHEADING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationHeading */
        try {
/*@egen*/
	[ LOOKAHEAD(heading()) heading() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void heading()          :
{/*@bgen(jjtree) Heading */
  ASTHeading jjtn000 = new ASTHeading(JJTHEADING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Heading */
        try {
/*@egen*/
	"{" [ attribute_spec_commalist() ] "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void tuple_exp_commalist()                           :
{/*@bgen(jjtree) TupleExpressionCommalist */
  ASTTupleExpressionCommalist jjtn000 = new ASTTupleExpressionCommalist(JJTTUPLEEXPRESSIONCOMMALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TupleExpressionCommalist */
        try {
/*@egen*/
	[ expression() ( "," expression() )* ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void attribute_spec_commalist() :
{}
{
	attribute_spec() ( "," attribute_spec() )*
}

void attribute_spec()                :
{/*@bgen(jjtree) AttributeSpec */
  ASTAttributeSpec jjtn000 = new ASTAttributeSpec(JJTATTRIBUTESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeSpec */
        try {
/*@egen*/
	identifier() type_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void identifier()             :
{/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtreeCloseNodeScope(jjtn000);
                         }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void dereference()              :
{/*@bgen(jjtree) Dereference */
 ASTDereference jjtn000 = new ASTDereference(JJTDEREFERENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Dereference */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtreeCloseNodeScope(jjtn000);
                         }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void character()            :
{/*@bgen(jjtree) Character */
 ASTCharacter jjtn000 = new ASTCharacter(JJTCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Character */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                             }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void string_literal()                :
{/*@bgen(jjtree) StringLiteral */
 ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StringLiteral */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                             }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void integer()          : 
{/*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/ 
	t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtreeCloseNodeScope(jjtn000);
                              }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void rational()           : 
{/*@bgen(jjtree) Rational */
 ASTRational jjtn000 = new ASTRational(JJTRATIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Rational */
        try {
/*@egen*/ 
	t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtreeCloseNodeScope(jjtn000);
                                     }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void bool() : 
{}
{/*@bgen(jjtree) True */
                {
                  ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		<TRUE>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/      
	|/*@bgen(jjtree) False */
                {
                  ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtreeOpenNodeScope(jjtn002);
                }
                try {
/*@egen*/	<FALSE>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                  }
                }
/*@egen*/       
}
