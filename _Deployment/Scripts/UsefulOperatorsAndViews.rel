// Assorted CHAR operators, largely based on Java String methods.

OPERATOR IS_DIGITS(s CHARACTER) RETURNS BOOLEAN Java FOREIGN
	String sbuf = s.stringValue();
	for (int i=0; i<sbuf.length(); i++)
		if (!Character.isDigit(sbuf.charAt(i)))
			return ValueBoolean.select(context.getGenerator(), false);
	return ValueBoolean.select(context.getGenerator(), true);
END OPERATOR;

OPERATOR LENGTH(s CHAR) RETURNS INTEGER Java FOREIGN
	return ValueInteger.select(context.getGenerator(), s.stringValue().length());
END OPERATOR;

OPERATOR SUBSTRING(s CHAR, index INTEGER) RETURNS CHAR Java FOREIGN
// Substring, 0 based
	return ValueCharacter.select(context.getGenerator(), s.stringValue().substring((int)index.longValue()));
END OPERATOR;

OPERATOR SUBSTRING(s CHAR, beginindex INTEGER, endindex INTEGER) RETURNS CHAR Java FOREIGN
// Substring, 0 based
	return ValueCharacter.select(context.getGenerator(), s.stringValue().substring((int)beginindex.longValue(), (int)endindex.longValue()));
END OPERATOR;

OPERATOR COMPARE_TO(s CHAR, anotherString CHAR) RETURNS INTEGER Java FOREIGN 
//          Compares two strings lexicographically.
	return ValueInteger.select(context.getGenerator(), s.stringValue().compareTo(anotherString.stringValue()));
END OPERATOR;

OPERATOR COMPARE_TO_IGNORE_CASE(s CHAR, str CHAR) RETURNS INTEGER Java FOREIGN
//          Compares two strings lexicographically, ignoring case differences.
	return ValueInteger.select(context.getGenerator(), s.stringValue().compareToIgnoreCase(str.stringValue()));
END OPERATOR;

OPERATOR ENDS_WITH(s CHAR, suffx CHAR) RETURNS BOOLEAN Java FOREIGN
	return ValueBoolean.select(context.getGenerator(), s.stringValue().endsWith(suffx.stringValue()));
END OPERATOR;

OPERATOR EQUALS_IGNORE_CASE(s CHAR, anotherString CHAR) RETURNS BOOLEAN Java FOREIGN
//          Compares this String to another String, ignoring case considerations.
	return ValueBoolean.select(context.getGenerator(), s.stringValue().equalsIgnoreCase(anotherString.stringValue()));
END OPERATOR;

OPERATOR INDEX_OF(s CHAR, str CHAR) RETURNS INTEGER Java FOREIGN
//          Returns the index within this string of the first occurrence of the specified substring.
	return ValueInteger.select(context.getGenerator(), s.stringValue().indexOf(str.stringValue()));
END OPERATOR;

OPERATOR INDEX_OF(s CHAR, str CHAR, fromIndex INTEGER) RETURNS INTEGER Java FOREIGN
//          Returns the index within this string of the first occurrence of the 
//          specified substring, starting at the specified index.
	return ValueInteger.select(context.getGenerator(), s.stringValue().indexOf(str.stringValue(), (int)fromIndex.longValue()));
END OPERATOR;

OPERATOR LAST_INDEX_OF(s CHAR, str CHAR) RETURNS INTEGER Java FOREIGN
//          Returns the index within this string of the rightmost occurrence of the specified substring.
	return ValueInteger.select(context.getGenerator(), s.stringValue().lastIndexOf(str.stringValue()));
END OPERATOR;

OPERATOR LAST_INDEX_OF(s CHAR, str CHAR, fromIndex INTEGER) RETURNS INTEGER Java FOREIGN
//          Returns the index within this string of the last occurrence of 
//          the specified substring, searching backward starting at the specified index.
	return ValueInteger.select(context.getGenerator(), s.stringValue().lastIndexOf(str.stringValue(), (int)fromIndex.longValue()));
END OPERATOR;

OPERATOR MATCHES(s CHAR, regex CHAR) RETURNS BOOLEAN Java FOREIGN
//          Tells whether or not this string matches the given regular expression.
	return ValueBoolean.select(context.getGenerator(), s.stringValue().matches(regex.stringValue()));
END OPERATOR;

OPERATOR REGION_MATCHES(s CHAR, ignoreCase BOOLEAN, toffset INTEGER, other CHAR, ooffset INTEGER, len INTEGER) 
RETURNS BOOLEAN Java FOREIGN
//          Tests if two string regions are equal.
	return ValueBoolean.select(context.getGenerator(), s.stringValue().regionMatches(ignoreCase.booleanValue(),
						(int)toffset.longValue(),
						other.stringValue(),
						(int)ooffset.longValue(),
						(int)len.longValue()));
END OPERATOR;

OPERATOR REPLACE_ALL(s CHAR, regex CHAR, replacement CHAR) RETURNS CHAR Java FOREIGN
//          Replaces each substring of this string that matches the given regular expression with the given replacement.
	return ValueCharacter.select(context.getGenerator(), s.stringValue().replaceAll(regex.stringValue(), replacement.stringValue()));
END OPERATOR;

OPERATOR REPLACE_FIRST(s CHAR, regex CHAR, replacement CHAR) RETURNS CHAR Java FOREIGN
//          Replaces the first substring of this string that matches the given regular expression with the given replacement.
	return ValueCharacter.select(context.getGenerator(), s.stringValue().replaceFirst(regex.stringValue(), replacement.stringValue()));
END OPERATOR;

/*
OPERATOR SPLIT(s CHAR, regex CHAR) RETURNS (ARRAY OF CHAR) Java FOREIGN
//          Splits this string around matches of the given regular expression.
	Array a = new Array(new ArrayType(TypeChar.getType()));
	String[] ss = s.stringValue().split(regex.stringValue());
	for (int i=0; i<ss.length; i++)
		a.append(ValueCharacter.select(context.getGenerator(), ss[i]));
	return a;
END OPERATOR;

OPERATOR SPLIT(s CHAR, regex CHAR, limit INTEGER) RETURNS (ARRAY OF CHAR) Java FOREIGN
//          Splits this string around matches of the given regular expression, up to n times.
	Array a = new Array(new ArrayType(TypeChar.getType()));
	String[] ss = s.stringValue().split(regex.stringValue(), (int)limit.longValue());
	for (int i=0; i<ss.length; i++)
		a.append(ValueCharacter.select(context.getGenerator(), ss[i]));
	return a;
END OPERATOR;
*/

OPERATOR STARTS_WITH(s CHAR, prefx CHAR) RETURNS BOOLEAN Java FOREIGN
//          Tests if this string starts with the specified prefix.
	return ValueBoolean.select(context.getGenerator(), s.stringValue().startsWith(prefx.stringValue()));
END OPERATOR;

OPERATOR STARTS_WITH(s CHAR, prefx CHAR, toffset INTEGER) RETURNS BOOLEAN Java FOREIGN
//          Tests if this string starts with the specified prefix beginning at a specified index.
	return ValueBoolean.select(context.getGenerator(), s.stringValue().startsWith(prefx.stringValue(), (int)toffset.longValue()));
END OPERATOR;

OPERATOR TO_LOWER_CASE(s CHAR) RETURNS CHAR Java FOREIGN
	return ValueCharacter.select(context.getGenerator(), s.stringValue().toLowerCase());
END OPERATOR;

OPERATOR TO_UPPER_CASE(s CHAR) RETURNS CHAR Java FOREIGN
//          Converts all of the characters in this String to upper case using the rules of the default locale.
	return ValueCharacter.select(context.getGenerator(), s.stringValue().toUpperCase());
END OPERATOR;

OPERATOR TRIM(s CHAR) RETURNS CHAR Java FOREIGN
//          Trim leading and trailing blanks.
	return ValueCharacter.select(context.getGenerator(), s.stringValue().trim());
END OPERATOR;

/** Math operators.  These are essentially a wrapper
    around the Java Math package. */

OPERATOR E() RETURNS RATIONAL Java FOREIGN 
// The RATIONAL value that is closer than any other to e, the base of
// the natural logarithms.
	return ValueRational.select(context.getGenerator(), Math.E);
END OPERATOR;

OPERATOR PI() RETURNS RATIONAL Java FOREIGN
// The RATIONAL value that is closer than any other to pi, the ratio of
// the circumference of a circle to its diameter.
	return ValueRational.select(context.getGenerator(), Math.PI);
END OPERATOR;

OPERATOR ABS(x RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the absolute value of a RATIONAL value.
	return ValueRational.select(context.getGenerator(), Math.abs(x.doubleValue()));
END OPERATOR;

OPERATOR ABS(x INTEGER) RETURNS INTEGER Java FOREIGN
// Returns the absolute value of a INTEGER value.
	return ValueInteger.select(context.getGenerator(), Math.abs(x.longValue()));
END OPERATOR;

OPERATOR ACOS(x RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the arc cosine of an angle, in the range of 0.0 through pi.
	return ValueRational.select(context.getGenerator(), Math.acos(x.doubleValue()));
END OPERATOR;

OPERATOR ASIN(x RATIONAL) RETURNS RATIONAL Java FOREIGN
//  Returns the arc sine of an angle, in the range of -pi/2 through pi/2.
	return ValueRational.select(context.getGenerator(), Math.asin(x.doubleValue()));
END OPERATOR;

OPERATOR ATAN(a RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the arc tangent of an angle, in the range of -pi/2 through
// pi/2.
	return ValueRational.select(context.getGenerator(), Math.atan(a.doubleValue()));
END OPERATOR;

OPERATOR ATAN2(y RATIONAL, x RATIONAL) RETURNS RATIONAL Java FOREIGN
// Converts rectangular coordinates (x, y) to polar (r, theta).
	return ValueRational.select(context.getGenerator(), Math.atan2(y.doubleValue(), x.doubleValue()));
END OPERATOR;

OPERATOR CEIL(a RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the smallest (closest to negative infinity) RATIONAL value
// that is not less than the argument and is equal to a mathematical
// integer.
	return ValueRational.select(context.getGenerator(), Math.ceil(a.doubleValue()));
END OPERATOR;

OPERATOR COS(a RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the trigonometric cosine of an angle.
	return ValueRational.select(context.getGenerator(), Math.cos(a.doubleValue()));
END OPERATOR;

OPERATOR EXP(a RATIONAL) RETURNS RATIONAL  Java FOREIGN      
// Returns Euler's number e raised to the power of a RATIONAL value.
	return ValueRational.select(context.getGenerator(), Math.exp(a.doubleValue()));
END OPERATOR;

OPERATOR FLOOR(a RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the largest (closest to positive infinity) RATIONAL value that
// is not greater than the argument and is equal to a mathematical
// integer.
	return ValueRational.select(context.getGenerator(), Math.floor(a.doubleValue()));
END OPERATOR;

OPERATOR REMAINDER(f1 RATIONAL, f2 RATIONAL) RETURNS RATIONAL  Java FOREIGN         
// Computes the remainder operation on two arguments as prescribed by the
// IEEE 754 standard.
	return ValueRational.select(context.getGenerator(), Math.IEEEremainder(f1.doubleValue(),
			f2.doubleValue()));
END OPERATOR;

OPERATOR LOG(a RATIONAL) RETURNS RATIONAL Java FOREIGN       
// Returns the natural logarithm (base e) of a RATIONAL value.
	return ValueRational.select(context.getGenerator(), Math.log(a.doubleValue()));
END OPERATOR;

OPERATOR MAXIMUM(a RATIONAL, b RATIONAL) RETURNS RATIONAL Java FOREIGN       
// Returns the greater of two RATIONAL values.
	return ValueRational.select(context.getGenerator(), Math.max(a.doubleValue(), b.doubleValue()));
END OPERATOR;

OPERATOR MAXIMUM(a INTEGER, b INTEGER) RETURNS INTEGER Java FOREIGN
// Returns the greater of two INTEGER values.
	return ValueInteger.select(context.getGenerator(), Math.max(a.longValue(), b.longValue()));
END OPERATOR;

OPERATOR MINIMUM(a RATIONAL, b RATIONAL) RETURNS RATIONAL Java FOREIGN
// Returns the smaller of two RATIONAL values.
	return ValueRational.select(context.getGenerator(), Math.min(a.doubleValue(), b.doubleValue()));
END OPERATOR;

OPERATOR MINIMUM(a INTEGER, b INTEGER) RETURNS INTEGER Java FOREIGN       
// Returns the smaller of two INTEGER values.
	return ValueInteger.select(context.getGenerator(), Math.min(a.longValue(), b.longValue()));
END OPERATOR;

OPERATOR POW(a RATIONAL, b RATIONAL) RETURNS RATIONAL Java FOREIGN       
// Returns the value of the first argument raised to the power of the
// second argument.
	return ValueRational.select(context.getGenerator(), Math.pow(a.doubleValue(), b.doubleValue()));
END OPERATOR;

OPERATOR RANDOM() RETURNS RATIONAL Java FOREIGN       
// Returns a RATIONAL value with a positive sign, greater than or equal
// to 0.0 and less than 1.0.
	return ValueRational.select(context.getGenerator(), Math.random());
END OPERATOR;

OPERATOR RINT(a RATIONAL) RETURNS RATIONAL Java FOREIGN       
// Returns the RATIONAL value that is closest in value to the argument
// and is equal to a mathematical integer.
	return ValueRational.select(context.getGenerator(), Math.rint(a.doubleValue()));
END OPERATOR;

OPERATOR ROUND(a RATIONAL) RETURNS INTEGER Java FOREIGN       
// Returns the closest INTEGER to the argument.
	return ValueInteger.select(context.getGenerator(), Math.round(a.doubleValue()));
END OPERATOR;

OPERATOR SIN(a RATIONAL) RETURNS RATIONAL Java FOREIGN       
// Returns the trigonometric sine of an angle.
	return ValueRational.select(context.getGenerator(), Math.sin(a.doubleValue()));
END OPERATOR;

OPERATOR SQRT(a RATIONAL) RETURNS RATIONAL Java FOREIGN          
// Returns the correctly rounded positive square root of a RATIONAL
// value.
	return ValueRational.select(context.getGenerator(), Math.sqrt(a.doubleValue()));
END OPERATOR;

OPERATOR TAN(a RATIONAL) RETURNS RATIONAL Java FOREIGN       
// Returns the trigonometric tangent of an angle.
	return ValueRational.select(context.getGenerator(), Math.tan(a.doubleValue()));
END OPERATOR;

OPERATOR TO_DEGREES(angrad RATIONAL) RETURNS RATIONAL Java FOREIGN          
// Converts an angle measured in radians to an approximately equivalent
// angle measured in degrees.
	return ValueRational.select(context.getGenerator(), Math.toDegrees(angrad.doubleValue()));
END OPERATOR;

OPERATOR TO_RADIANS(angdeg RATIONAL) RETURNS RATIONAL Java FOREIGN
// Converts an angle measured in degrees to an approximately equivalent
// angle measured in radians.
	return ValueRational.select(context.getGenerator(), Math.toRadians(angdeg.doubleValue()));
END OPERATOR;

/** Maxima and minima. */

OPERATOR MAX_INTEGER() RETURNS INTEGER Java FOREIGN
// Largest positive integer
	return ValueInteger.select(context.getGenerator(), Long.MAX_VALUE);
END OPERATOR;

OPERATOR MIN_INTEGER() RETURNS INTEGER Java FOREIGN
// Largest negative integer
	return ValueInteger.select(context.getGenerator(), Long.MIN_VALUE);
END OPERATOR;

OPERATOR MAX_RATIONAL() RETURNS RATIONAL Java FOREIGN
// Largest positive rational
	return ValueRational.select(context.getGenerator(), Double.MAX_VALUE);
END OPERATOR;

OPERATOR MIN_RATIONAL() RETURNS RATIONAL Java FOREIGN
// Smallest positive rational
	return ValueRational.select(context.getGenerator(), Double.MIN_VALUE);
END OPERATOR;

// Convenient VIRTUAL relvars.

// User-defined relvars
VAR Dir VIEW (sys.Catalog WHERE Owner<>"Rel") {Name};

// System relvars
VAR sysDir VIEW (sys.Catalog WHERE Owner="Rel") {Name};

// Operators
VAR Ops VIEW sys.Operators {Name};

// Dependencies
VAR Dependencies VIEW UNION {
   EXTEND sys.DependenciesTypeType : {Dependency := "Type on Type"},
   EXTEND sys.DependenciesRelvarType : {Dependency := "Relvar on Type"},
   EXTEND sys.DependenciesOperatorType : {Dependency := "Operator on Type"},
   EXTEND sys.DependenciesRelvarRelvar : {Dependency := "Relvar on Relvar"},
   EXTEND sys.DependenciesTypeOperator : {Dependency := "Type on Operator"},
   EXTEND sys.DependenciesOperatorRelvar : {Dependency := "Operator on Relvar"},
   EXTEND sys.DependenciesRelvarOperator : {Dependency := "Relvar on Operator"},
   EXTEND sys.DependenciesConstraintRelvar : {Dependency := "Constraint on Relvar"},
   EXTEND sys.DependenciesOperatorOperator : {Dependency := "Operator on Operator"},
   EXTEND sys.DependenciesConstraintOperator : {Dependency := "Constraint on Operator"},
   EXTEND sys.DependenciesTypeRelvar : {Dependency := "Type on Relvar"},
   EXTEND sys.DependenciesConstraintType : {Dependency := "Constraint on Type"}
};
