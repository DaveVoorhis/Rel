TYPE Simple Java FOREIGN

// A simple demonstration type. 

	private String x;

	/** OP_EQUALS(Simple, Simple) RETURNS BOOLEAN */
	public static ValueBoolean OP_EQUALS(Generator generator, Simple d1, Simple d2) {
		return ValueBoolean.select(generator, d1.compareTo(d2) == 0);
	}

	/** OP_GREATERTHAN(Simple, Simple) RETURNS BOOLEAN */
	public static ValueBoolean OP_GREATERTHAN(Generator generator, Simple d1, Simple d2) {
		return ValueBoolean.select(generator, d1.compareTo(d2) > 0);
	}

	/** OP_LESSTHAN(Simple, Simple) RETURNS BOOLEAN */
	public static ValueBoolean OP_LESSTHAN(Generator generator, Simple d1, Simple d2) {
		return ValueBoolean.select(generator, d1.compareTo(d2) < 0);
	}

	/** OP_GREATERTHANOREQUALS(Simple, Simple) RETURNS BOOLEAN */
	public static ValueBoolean OP_GREATERTHANOREQUALS(Generator generator, Simple d1, Simple d2) {
		return ValueBoolean.select(generator, d1.compareTo(d2) >= 0);
	}

	/** OP_LESSTHANOREQUALS(Simple, Simple) RETURNS BOOLEAN */
	public static ValueBoolean OP_LESSTHANOREQUALS(Generator generator, Simple d1, Simple d2) {
		return ValueBoolean.select(generator, d1.compareTo(d2) <= 0);
	}

	/** OP_NOTEQUALS(Simple, Simple) RETURNS BOOLEAN */
	public static ValueBoolean OP_NOTEQUALS(Generator generator, Simple d1, Simple d2) {
		return ValueBoolean.select(generator, d1.compareTo(d2) != 0);
	}

	/** Type constructor. */
	public Simple(Generator generator) {
		super(generator);
		x = "";
	}

	/** Value constructor. */
	public Simple(Generator generator, ValueInteger v) {
		super(generator);
		x = v.toString();
	}

	/** Return a Simple in a readable format. */
	public ValueCharacter readable(Generator generator) {
		return ValueCharacter.select(generator, x);
	}

	/** Compare this Value to another Value of the same Type. */
	public int compareTo(Value v) {
		return x.compareTo(((Simple)v).x);
	}
    
	/** Return a parsable representation of this Value. */
	public String toParsableString(Type type) {
		return toString();
	}
    
	/** Return a string representation of this Value. */
	public String toString() {
		return "Simple(" + x + ")";
	}
    
	/** Get a default Value of this Type. */
	public Value getDefaultValue(Generator generator) {
		return new Simple(generator, ValueInteger.select(generator, 0L));
	}

END TYPE;
